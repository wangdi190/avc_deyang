// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.3

#ifndef ___odb_net_h__
#define ___odb_net_h__

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010300L)
#       error ORBacus version mismatch!
#   endif
#endif

#ifdef _WINDOWS32
#ifdef ODB_API_LIB_EXPORTS
#define ODB_API_LIB_API __declspec(dllexport)
#else
#define ODB_API_LIB_API __declspec(dllimport)
#endif
#endif


namespace ODB_CORBA
{

class CODB_NET;
typedef CODB_NET* CODB_NET_ptr;
typedef CODB_NET* CODB_NETRef;

extern OB::TypeCodeConst _tc_CODB_NET;

} // End of namespace ODB_CORBA

void OBDuplicate(ODB_CORBA::CODB_NET_ptr);
void OBRelease(ODB_CORBA::CODB_NET_ptr);

void OBMarshal(ODB_CORBA::CODB_NET_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(ODB_CORBA::CODB_NET_ptr&, OB::InputStreamImpl*);

namespace ODB_CORBA
{

typedef OB::ObjVar< CODB_NET > CODB_NET_var;
typedef OB::ObjOut< CODB_NET > CODB_NET_out;

} // End of namespace ODB_CORBA

namespace OBStubImpl_ODB_CORBA
{

class CODB_NET;
typedef CODB_NET* CODB_NET_ptr;

} // End of namespace OBStubImpl_ODB_CORBA

void OBDuplicate(OBStubImpl_ODB_CORBA::CODB_NET_ptr);
void OBRelease(OBStubImpl_ODB_CORBA::CODB_NET_ptr);

namespace OBStubImpl_ODB_CORBA
{

typedef OB::ObjVar< CODB_NET > CODB_NET_var;

} // End of namespace OBStubImpl_ODB_CORBA

//
// IDL:ODB_CORBA:1.0
//
namespace ODB_CORBA
{

//
// IDL:ODB_CORBA/CODB_NET:1.0
//
class CODB_NET : virtual public ::CORBA::Object
{
    CODB_NET(const CODB_NET&);
    void operator=(const CODB_NET&);

protected:

    static const char* ids_[];

public:

    CODB_NET() { }
    virtual ~CODB_NET() { }

    typedef CODB_NET_ptr _ptr_type;
    typedef CODB_NET_var _var_type;

    static inline CODB_NET_ptr
    _duplicate(CODB_NET_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline CODB_NET_ptr
    _nil()
    {
        return 0;
    }

    static CODB_NET_ptr _narrow(::CORBA::Object_ptr);
    static CODB_NET_ptr _unchecked_narrow(::CORBA::Object_ptr);

    static CODB_NET_ptr _narrow(::CORBA::AbstractBase_ptr);
    static CODB_NET_ptr _unchecked_narrow(::CORBA::AbstractBase_ptr);

    static const char** _OB_staticIds();

    //
    // IDL:ODB_CORBA/CODB_NET/C_DATATYPE_STRING:1.0
    //
#if defined(HAVE_VCPLUSPLUS_BUGS) || defined(_AIX)
    static const ::CORBA::Short C_DATATYPE_STRING;
#else
    static const ::CORBA::Short C_DATATYPE_STRING = 1;
#endif

    //
    // IDL:ODB_CORBA/CODB_NET/C_DATATYPE_UCHAR:1.0
    //
#if defined(HAVE_VCPLUSPLUS_BUGS) || defined(_AIX)
    static const ::CORBA::Short C_DATATYPE_UCHAR;
#else
    static const ::CORBA::Short C_DATATYPE_UCHAR = 2;
#endif

    //
    // IDL:ODB_CORBA/CODB_NET/C_DATATYPE_SHORT:1.0
    //
#if defined(HAVE_VCPLUSPLUS_BUGS) || defined(_AIX)
    static const ::CORBA::Short C_DATATYPE_SHORT;
#else
    static const ::CORBA::Short C_DATATYPE_SHORT = 3;
#endif

    //
    // IDL:ODB_CORBA/CODB_NET/C_DATATYPE_INT:1.0
    //
#if defined(HAVE_VCPLUSPLUS_BUGS) || defined(_AIX)
    static const ::CORBA::Short C_DATATYPE_INT;
#else
    static const ::CORBA::Short C_DATATYPE_INT = 4;
#endif

    //
    // IDL:ODB_CORBA/CODB_NET/C_DATATYPE_DATETIME:1.0
    //
#if defined(HAVE_VCPLUSPLUS_BUGS) || defined(_AIX)
    static const ::CORBA::Short C_DATATYPE_DATETIME;
#else
    static const ::CORBA::Short C_DATATYPE_DATETIME = 5;
#endif

    //
    // IDL:ODB_CORBA/CODB_NET/C_DATATYPE_FLOAT:1.0
    //
#if defined(HAVE_VCPLUSPLUS_BUGS) || defined(_AIX)
    static const ::CORBA::Short C_DATATYPE_FLOAT;
#else
    static const ::CORBA::Short C_DATATYPE_FLOAT = 6;
#endif

    //
    // IDL:ODB_CORBA/CODB_NET/C_DATATYPE_DOUBLE:1.0
    //
#if defined(HAVE_VCPLUSPLUS_BUGS) || defined(_AIX)
    static const ::CORBA::Short C_DATATYPE_DOUBLE;
#else
    static const ::CORBA::Short C_DATATYPE_DOUBLE = 7;
#endif

    //
    // IDL:ODB_CORBA/CODB_NET/C_DATATYPE_KEYID:1.0
    //
#if defined(HAVE_VCPLUSPLUS_BUGS) || defined(_AIX)
    static const ::CORBA::Short C_DATATYPE_KEYID;
#else
    static const ::CORBA::Short C_DATATYPE_KEYID = 8;
#endif

    //
    // IDL:ODB_CORBA/CODB_NET/C_DATATYPE_BINARY:1.0
    //
#if defined(HAVE_VCPLUSPLUS_BUGS) || defined(_AIX)
    static const ::CORBA::Short C_DATATYPE_BINARY;
#else
    static const ::CORBA::Short C_DATATYPE_BINARY = 9;
#endif

    //
    // IDL:ODB_CORBA/CODB_NET/C_DATATYPE_TEXT:1.0
    //
#if defined(HAVE_VCPLUSPLUS_BUGS) || defined(_AIX)
    static const ::CORBA::Short C_DATATYPE_TEXT;
#else
    static const ::CORBA::Short C_DATATYPE_TEXT = 10;
#endif

    //
    // IDL:ODB_CORBA/CODB_NET/C_DATATYPE_IMAGE:1.0
    //
#if defined(HAVE_VCPLUSPLUS_BUGS) || defined(_AIX)
    static const ::CORBA::Short C_DATATYPE_IMAGE;
#else
    static const ::CORBA::Short C_DATATYPE_IMAGE = 11;
#endif

    //
    // IDL:ODB_CORBA/CODB_NET/C_DATATYPE_APPKEYID:1.0
    //
#if defined(HAVE_VCPLUSPLUS_BUGS) || defined(_AIX)
    static const ::CORBA::Short C_DATATYPE_APPKEYID;
#else
    static const ::CORBA::Short C_DATATYPE_APPKEYID = 12;
#endif

    //
    // IDL:ODB_CORBA/CODB_NET/C_DATATYPE_APPID:1.0
    //
#if defined(HAVE_VCPLUSPLUS_BUGS) || defined(_AIX)
    static const ::CORBA::Short C_DATATYPE_APPID;
#else
    static const ::CORBA::Short C_DATATYPE_APPID = 13;
#endif

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_STRING:1.0
    //
    class OBUnique_SEQ_STRING { };

    typedef OB::StrSeq< OBUnique_SEQ_STRING > SEQ_STRING;
    typedef OB::SeqVar< OB::StrSeq< OBUnique_SEQ_STRING > > SEQ_STRING_var;
    typedef OB::SeqOut< OB::StrSeq< OBUnique_SEQ_STRING > > SEQ_STRING_out;
    static OB::TypeCodeConst _tc_SEQ_STRING;

    struct OBInfo_SEQ_STRING : public OB::ConstructedInfo
    {
        OBInfo_SEQ_STRING() { }

        virtual void free(void* p) const
        {
            delete (SEQ_STRING*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_STRING(*(const SEQ_STRING*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_CHAR:1.0
    //
    class OBUnique_SEQ_CHAR { };

    typedef OB::FixSeq< ::CORBA::Char, OBUnique_SEQ_CHAR > SEQ_CHAR;
    typedef OB::SeqVar< OB::FixSeq< ::CORBA::Char, OBUnique_SEQ_CHAR > > SEQ_CHAR_var;
    typedef OB::SeqOut< OB::FixSeq< ::CORBA::Char, OBUnique_SEQ_CHAR > > SEQ_CHAR_out;
    static OB::TypeCodeConst _tc_SEQ_CHAR;

    struct OBInfo_SEQ_CHAR : public OB::ConstructedInfo
    {
        OBInfo_SEQ_CHAR() { }

        virtual void free(void* p) const
        {
            delete (SEQ_CHAR*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_CHAR(*(const SEQ_CHAR*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_FLOAT:1.0
    //
    class OBUnique_SEQ_FLOAT { };

    typedef OB::FixSeq< ::CORBA::Float, OBUnique_SEQ_FLOAT > SEQ_FLOAT;
    typedef OB::SeqVar< OB::FixSeq< ::CORBA::Float, OBUnique_SEQ_FLOAT > > SEQ_FLOAT_var;
    typedef OB::SeqOut< OB::FixSeq< ::CORBA::Float, OBUnique_SEQ_FLOAT > > SEQ_FLOAT_out;
    static OB::TypeCodeConst _tc_SEQ_FLOAT;

    struct OBInfo_SEQ_FLOAT : public OB::ConstructedInfo
    {
        OBInfo_SEQ_FLOAT() { }

        virtual void free(void* p) const
        {
            delete (SEQ_FLOAT*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_FLOAT(*(const SEQ_FLOAT*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_LONG:1.0
    //
    class OBUnique_SEQ_LONG { };

    typedef OB::FixSeq< ::CORBA::Long, OBUnique_SEQ_LONG > SEQ_LONG;
    typedef OB::SeqVar< OB::FixSeq< ::CORBA::Long, OBUnique_SEQ_LONG > > SEQ_LONG_var;
    typedef OB::SeqOut< OB::FixSeq< ::CORBA::Long, OBUnique_SEQ_LONG > > SEQ_LONG_out;
    static OB::TypeCodeConst _tc_SEQ_LONG;

    struct OBInfo_SEQ_LONG : public OB::ConstructedInfo
    {
        OBInfo_SEQ_LONG() { }

        virtual void free(void* p) const
        {
            delete (SEQ_LONG*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_LONG(*(const SEQ_LONG*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/KEYID_STRUCT:1.0
    //
    struct KEYID_STRUCT;
    typedef OB::FixVar< KEYID_STRUCT > KEYID_STRUCT_var;
    typedef KEYID_STRUCT& KEYID_STRUCT_out;

    struct KEYID_STRUCT
    {
        typedef KEYID_STRUCT_var _var_type;

        ::CORBA::Long record_id;
        ::CORBA::Short column_id;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(KEYID_STRUCT&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_KEYID_STRUCT;

    //
    // IDL:ODB_CORBA/CODB_NET/APPKEY_STRUCT:1.0
    //
    struct APPKEY_STRUCT;
    typedef OB::FixVar< APPKEY_STRUCT > APPKEY_STRUCT_var;
    typedef APPKEY_STRUCT& APPKEY_STRUCT_out;

    struct APPKEY_STRUCT
    {
        typedef APPKEY_STRUCT_var _var_type;

        ::CORBA::Long app_id;
        ::CORBA::Long record_id;
        ::CORBA::Short column_id;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(APPKEY_STRUCT&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_APPKEY_STRUCT;

    //
    // IDL:ODB_CORBA/CODB_NET/APPID_STRUCT:1.0
    //
    struct APPID_STRUCT;
    typedef OB::FixVar< APPID_STRUCT > APPID_STRUCT_var;
    typedef APPID_STRUCT& APPID_STRUCT_out;

    struct APPID_STRUCT
    {
        typedef APPID_STRUCT_var _var_type;

        ::CORBA::Long app_id;
        ::CORBA::Long record_id;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(APPID_STRUCT&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_APPID_STRUCT;

    //
    // IDL:ODB_CORBA/CODB_NET/KEYID_STATUS_STRUCT:1.0
    //
    struct KEYID_STATUS_STRUCT;
    typedef OB::FixVar< KEYID_STATUS_STRUCT > KEYID_STATUS_STRUCT_var;
    typedef KEYID_STATUS_STRUCT& KEYID_STATUS_STRUCT_out;

    struct KEYID_STATUS_STRUCT
    {
        typedef KEYID_STATUS_STRUCT_var _var_type;

        KEYID_STRUCT key_id;
        ::CORBA::Short status;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(KEYID_STATUS_STRUCT&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_KEYID_STATUS_STRUCT;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_KEY_ID:1.0
    //
    class OBUnique_SEQ_KEY_ID { };

    typedef OB::FixSeq< KEYID_STRUCT, OBUnique_SEQ_KEY_ID > SEQ_KEY_ID;
    typedef OB::SeqVar< OB::FixSeq< KEYID_STRUCT, OBUnique_SEQ_KEY_ID > > SEQ_KEY_ID_var;
    typedef OB::SeqOut< OB::FixSeq< KEYID_STRUCT, OBUnique_SEQ_KEY_ID > > SEQ_KEY_ID_out;
    static OB::TypeCodeConst _tc_SEQ_KEY_ID;

    struct OBInfo_SEQ_KEY_ID : public OB::ConstructedInfo
    {
        OBInfo_SEQ_KEY_ID() { }

        virtual void free(void* p) const
        {
            delete (SEQ_KEY_ID*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_KEY_ID(*(const SEQ_KEY_ID*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_APPKEY_ID:1.0
    //
    class OBUnique_SEQ_APPKEY_ID { };

    typedef OB::FixSeq< APPKEY_STRUCT, OBUnique_SEQ_APPKEY_ID > SEQ_APPKEY_ID;
    typedef OB::SeqVar< OB::FixSeq< APPKEY_STRUCT, OBUnique_SEQ_APPKEY_ID > > SEQ_APPKEY_ID_var;
    typedef OB::SeqOut< OB::FixSeq< APPKEY_STRUCT, OBUnique_SEQ_APPKEY_ID > > SEQ_APPKEY_ID_out;
    static OB::TypeCodeConst _tc_SEQ_APPKEY_ID;

    struct OBInfo_SEQ_APPKEY_ID : public OB::ConstructedInfo
    {
        OBInfo_SEQ_APPKEY_ID() { }

        virtual void free(void* p) const
        {
            delete (SEQ_APPKEY_ID*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_APPKEY_ID(*(const SEQ_APPKEY_ID*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_APP_ID:1.0
    //
    class OBUnique_SEQ_APP_ID { };

    typedef OB::FixSeq< APPID_STRUCT, OBUnique_SEQ_APP_ID > SEQ_APP_ID;
    typedef OB::SeqVar< OB::FixSeq< APPID_STRUCT, OBUnique_SEQ_APP_ID > > SEQ_APP_ID_var;
    typedef OB::SeqOut< OB::FixSeq< APPID_STRUCT, OBUnique_SEQ_APP_ID > > SEQ_APP_ID_out;
    static OB::TypeCodeConst _tc_SEQ_APP_ID;

    struct OBInfo_SEQ_APP_ID : public OB::ConstructedInfo
    {
        OBInfo_SEQ_APP_ID() { }

        virtual void free(void* p) const
        {
            delete (SEQ_APP_ID*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_APP_ID(*(const SEQ_APP_ID*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_KEY_ID_STA:1.0
    //
    class OBUnique_SEQ_KEY_ID_STA { };

    typedef OB::FixSeq< KEYID_STATUS_STRUCT, OBUnique_SEQ_KEY_ID_STA > SEQ_KEY_ID_STA;
    typedef OB::SeqVar< OB::FixSeq< KEYID_STATUS_STRUCT, OBUnique_SEQ_KEY_ID_STA > > SEQ_KEY_ID_STA_var;
    typedef OB::SeqOut< OB::FixSeq< KEYID_STATUS_STRUCT, OBUnique_SEQ_KEY_ID_STA > > SEQ_KEY_ID_STA_out;
    static OB::TypeCodeConst _tc_SEQ_KEY_ID_STA;

    struct OBInfo_SEQ_KEY_ID_STA : public OB::ConstructedInfo
    {
        OBInfo_SEQ_KEY_ID_STA() { }

        virtual void free(void* p) const
        {
            delete (SEQ_KEY_ID_STA*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_KEY_ID_STA(*(const SEQ_KEY_ID_STA*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/union_data_type:1.0
    //
    struct union_data_type;
    typedef OB::VarVar< union_data_type > union_data_type_var;
    typedef OB::VarOut< union_data_type > union_data_type_out;

    #ifndef _WINDOWS32
    struct union_data_type
    #else
    struct ODB_API_LIB_API union_data_type
    #endif
    {
    private:

        union
        {
            char* c_char;
            ::CORBA::Octet c_uchar;
            ::CORBA::Short c_short;
            ::CORBA::Long c_int;
            ::CORBA::Long c_time;
            ::CORBA::Float c_float;
            ::CORBA::Double c_double;
            KEYID_STRUCT c_keyid;
            SEQ_CHAR* c_binary;
            SEQ_CHAR* c_text;
            SEQ_CHAR* c_image;
            APPKEY_STRUCT c_appkeyid;
            APPID_STRUCT c_appid;
        } _ob_v_;

        bool _ob_i_;
        ::CORBA::Short _ob_d_;

        void _OB_remove();
        bool _OB_check(::CORBA::Short) const;

    public:

        typedef union_data_type_var _var_type;

#ifdef OB_CLEAR_MEM
        union_data_type();
#else
        union_data_type() : _ob_i_(false) { }
#endif
        union_data_type(const union_data_type&);
        ~union_data_type() { _OB_remove(); }

        union_data_type& operator=(const union_data_type&);

        void _d(::CORBA::Short);
        ::CORBA::Short _d() const;

        void c_char(char*);
        void c_char(const char*);
        void c_char(const ::CORBA::String_var&);
        const char* c_char() const;

        void c_uchar(::CORBA::Octet);
        ::CORBA::Octet c_uchar() const;

        void c_short(::CORBA::Short);
        ::CORBA::Short c_short() const;

        void c_int(::CORBA::Long);
        ::CORBA::Long c_int() const;

        void c_time(::CORBA::Long);
        ::CORBA::Long c_time() const;

        void c_float(::CORBA::Float);
        ::CORBA::Float c_float() const;

        void c_double(::CORBA::Double);
        ::CORBA::Double c_double() const;

        void c_keyid(const KEYID_STRUCT&);
        const KEYID_STRUCT& c_keyid() const;
        KEYID_STRUCT& c_keyid();

        void c_binary(const SEQ_CHAR&);
        const SEQ_CHAR& c_binary() const;
        SEQ_CHAR& c_binary();

        void c_text(const SEQ_CHAR&);
        const SEQ_CHAR& c_text() const;
        SEQ_CHAR& c_text();

        void c_image(const SEQ_CHAR&);
        const SEQ_CHAR& c_image() const;
        SEQ_CHAR& c_image();

        void c_appkeyid(const APPKEY_STRUCT&);
        const APPKEY_STRUCT& c_appkeyid() const;
        APPKEY_STRUCT& c_appkeyid();

        void c_appid(const APPID_STRUCT&);
        const APPID_STRUCT& c_appid() const;
        APPID_STRUCT& c_appid();

        void _default();

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(union_data_type&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_union_data_type;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_COMMON_DATA:1.0
    //
    class OBUnique_SEQ_COMMON_DATA { };

    typedef OB::VarSeq< union_data_type, OBUnique_SEQ_COMMON_DATA > SEQ_COMMON_DATA;
    typedef OB::SeqVar< OB::VarSeq< union_data_type, OBUnique_SEQ_COMMON_DATA > > SEQ_COMMON_DATA_var;
    typedef OB::SeqOut< OB::VarSeq< union_data_type, OBUnique_SEQ_COMMON_DATA > > SEQ_COMMON_DATA_out;
    static OB::TypeCodeConst _tc_SEQ_COMMON_DATA;

    struct OBInfo_SEQ_COMMON_DATA : public OB::ConstructedInfo
    {
        OBInfo_SEQ_COMMON_DATA() { }

        virtual void free(void* p) const
        {
            delete (SEQ_COMMON_DATA*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_COMMON_DATA(*(const SEQ_COMMON_DATA*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/TABLE_STRU:1.0
    //
    struct TABLE_STRU;
    typedef OB::VarVar< TABLE_STRU > TABLE_STRU_var;
    typedef OB::VarOut< TABLE_STRU > TABLE_STRU_out;

    struct TABLE_STRU
    {
#ifdef OB_CLEAR_MEM
        TABLE_STRU();
#else
        TABLE_STRU() { }
#endif
        TABLE_STRU(const TABLE_STRU&);
        TABLE_STRU& operator=(const TABLE_STRU&);

        typedef TABLE_STRU_var _var_type;

        ::CORBA::Long table_no;
        ::CORBA::Short app_no;
        ::CORBA::Short column_num;
        OB::StrForStruct table_name_eng;
        OB::StrForStruct table_name_chn;
        ::CORBA::Short record_length;
        ::CORBA::Long record_num;
        ::CORBA::Long max_record_num;
        ::CORBA::Octet is_auto_generate;
        ::CORBA::Octet is_record_app;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(TABLE_STRU&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_TABLE_STRU;

    //
    // IDL:ODB_CORBA/CODB_NET/COLUMN_STRU:1.0
    //
    struct COLUMN_STRU;
    typedef OB::VarVar< COLUMN_STRU > COLUMN_STRU_var;
    typedef OB::VarOut< COLUMN_STRU > COLUMN_STRU_out;

    struct COLUMN_STRU
    {
#ifdef OB_CLEAR_MEM
        COLUMN_STRU();
#else
        COLUMN_STRU() { }
#endif
        COLUMN_STRU(const COLUMN_STRU&);
        COLUMN_STRU& operator=(const COLUMN_STRU&);

        typedef COLUMN_STRU_var _var_type;

        ::CORBA::Short field_no;
        OB::StrForStruct field_name_eng;
        OB::StrForStruct field_name_chn;
        ::CORBA::Short data_length;
        ::CORBA::Octet data_type;
        ::CORBA::Octet allow_null;
        ::CORBA::Octet is_display;
        ::CORBA::Octet display_type;
        ::CORBA::Short display_length;
        ::CORBA::Octet display_precision;
        OB::StrForStruct menu_name;
        ::CORBA::Octet reference_flag;
        ::CORBA::Octet is_key;
        ::CORBA::Octet is_index;
        ::CORBA::Octet sort_order_no;
        ::CORBA::Octet reference_display;
        ::CORBA::Octet is_input;
        ::CORBA::Octet is_fix;
        OB::StrForStruct init_value;
        OB::StrForStruct min_value;
        OB::StrForStruct max_value;
        ::CORBA::Long reference_table;
        ::CORBA::Short reference_column;
        ::CORBA::Long column_special;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(COLUMN_STRU&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_COLUMN_STRU;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_COLUMN_INFO:1.0
    //
    class OBUnique_SEQ_COLUMN_INFO { };

    typedef OB::VarSeq< COLUMN_STRU, OBUnique_SEQ_COLUMN_INFO > SEQ_COLUMN_INFO;
    typedef OB::SeqVar< OB::VarSeq< COLUMN_STRU, OBUnique_SEQ_COLUMN_INFO > > SEQ_COLUMN_INFO_var;
    typedef OB::SeqOut< OB::VarSeq< COLUMN_STRU, OBUnique_SEQ_COLUMN_INFO > > SEQ_COLUMN_INFO_out;
    static OB::TypeCodeConst _tc_SEQ_COLUMN_INFO;

    struct OBInfo_SEQ_COLUMN_INFO : public OB::ConstructedInfo
    {
        OBInfo_SEQ_COLUMN_INFO() { }

        virtual void free(void* p) const
        {
            delete (SEQ_COLUMN_INFO*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_COLUMN_INFO(*(const SEQ_COLUMN_INFO*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_STDB_CREATE:1.0
    //
    struct REQ_STDB_CREATE;
    typedef OB::VarVar< REQ_STDB_CREATE > REQ_STDB_CREATE_var;
    typedef OB::VarOut< REQ_STDB_CREATE > REQ_STDB_CREATE_out;

    struct REQ_STDB_CREATE
    {
        REQ_STDB_CREATE() { }
        REQ_STDB_CREATE(const REQ_STDB_CREATE&);
        REQ_STDB_CREATE& operator=(const REQ_STDB_CREATE&);

        typedef REQ_STDB_CREATE_var _var_type;

        TABLE_STRU table_info;
        SEQ_COLUMN_INFO column_info;
        SEQ_COMMON_DATA data_value;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_STDB_CREATE&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_STDB_CREATE;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_STDB_DELETE:1.0
    //
    struct REQ_STDB_DELETE;
    typedef OB::VarVar< REQ_STDB_DELETE > REQ_STDB_DELETE_var;
    typedef OB::VarOut< REQ_STDB_DELETE > REQ_STDB_DELETE_out;

    struct REQ_STDB_DELETE
    {
#ifdef OB_CLEAR_MEM
        REQ_STDB_DELETE();
#else
        REQ_STDB_DELETE() { }
#endif
        REQ_STDB_DELETE(const REQ_STDB_DELETE&);
        REQ_STDB_DELETE& operator=(const REQ_STDB_DELETE&);

        typedef REQ_STDB_DELETE_var _var_type;

        ::CORBA::Short app_no;
        ::CORBA::Long table_no;
        OB::StrForStruct passwd;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_STDB_DELETE&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_STDB_DELETE;

    //
    // IDL:ODB_CORBA/CODB_NET/TABLE_PARAMETER:1.0
    //
    struct TABLE_PARAMETER;
    typedef OB::VarVar< TABLE_PARAMETER > TABLE_PARAMETER_var;
    typedef OB::VarOut< TABLE_PARAMETER > TABLE_PARAMETER_out;

    struct TABLE_PARAMETER
    {
#ifdef OB_CLEAR_MEM
        TABLE_PARAMETER();
#else
        TABLE_PARAMETER() { }
#endif
        TABLE_PARAMETER(const TABLE_PARAMETER&);
        TABLE_PARAMETER& operator=(const TABLE_PARAMETER&);

        typedef TABLE_PARAMETER_var _var_type;

        OB::StrForStruct table_name_eng;
        OB::StrForStruct table_name_chn;
        ::CORBA::Long table_no;
        ::CORBA::Long key_len;
        ::CORBA::Long subkey_num;
        ::CORBA::Short field_sum;
        ::CORBA::Long record_number;
        ::CORBA::Long record_size;
        ::CORBA::Octet is_auto_generated;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(TABLE_PARAMETER&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_TABLE_PARAMETER;

    //
    // IDL:ODB_CORBA/CODB_NET/FIELD_PARAMETER:1.0
    //
    struct FIELD_PARAMETER;
    typedef OB::VarVar< FIELD_PARAMETER > FIELD_PARAMETER_var;
    typedef OB::VarOut< FIELD_PARAMETER > FIELD_PARAMETER_out;

    struct FIELD_PARAMETER
    {
#ifdef OB_CLEAR_MEM
        FIELD_PARAMETER();
#else
        FIELD_PARAMETER() { }
#endif
        FIELD_PARAMETER(const FIELD_PARAMETER&);
        FIELD_PARAMETER& operator=(const FIELD_PARAMETER&);

        typedef FIELD_PARAMETER_var _var_type;

        ::CORBA::Short field_no;
        ::CORBA::Short r_field_no;
        ::CORBA::Short field_id;
        ::CORBA::Short column_id;
        OB::StrForStruct field_name_eng;
        OB::StrForStruct field_name_chn;
        ::CORBA::Short field_length;
        ::CORBA::Octet data_type;
        ::CORBA::Octet allow_null;
        ::CORBA::Octet display_type;
        OB::StrForStruct menu_name;
        ::CORBA::Octet reference_flag;
        ::CORBA::Octet is_keyword;
        ::CORBA::Octet is_index;
        ::CORBA::Long offset;
        ::CORBA::Long check_tag;
        ::CORBA::Octet sort_order_no;
        ::CORBA::Octet reference_mode;
        ::CORBA::Octet reference_display;
        ::CORBA::Octet is_app_syn;
        ::CORBA::Octet auto_meas_type;
        OB::StrForStruct default_asciival;
        OB::StrForStruct min_asciival;
        OB::StrForStruct max_asciival;
        ::CORBA::Long ref_tableno;
        ::CORBA::Short ref_fieldno;
        ::CORBA::Long column_special;
        ::CORBA::Long search_attribute;
        ::CORBA::Long statics_attribute;
        ::CORBA::Long reserved_1;
        ::CORBA::Long reserved_2;
        ::CORBA::Long reserved_3;
        ::CORBA::Long reserved_4;
        ::CORBA::Long reserved_5;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(FIELD_PARAMETER&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_FIELD_PARAMETER;

    //
    // IDL:ODB_CORBA/CODB_NET/FIELD_BASE_INFO:1.0
    //
    struct FIELD_BASE_INFO;
    typedef OB::FixVar< FIELD_BASE_INFO > FIELD_BASE_INFO_var;
    typedef FIELD_BASE_INFO& FIELD_BASE_INFO_out;

    struct FIELD_BASE_INFO
    {
        typedef FIELD_BASE_INFO_var _var_type;

        ::CORBA::Long offset;
        ::CORBA::Long field_length;
        ::CORBA::Short field_no;
        ::CORBA::Octet data_type;
        ::CORBA::Octet is_keyword;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(FIELD_BASE_INFO&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_FIELD_BASE_INFO;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_FIELD_BASE_INFO:1.0
    //
    class OBUnique_SEQ_FIELD_BASE_INFO { };

    typedef OB::FixSeq< FIELD_BASE_INFO, OBUnique_SEQ_FIELD_BASE_INFO > SEQ_FIELD_BASE_INFO;
    typedef OB::SeqVar< OB::FixSeq< FIELD_BASE_INFO, OBUnique_SEQ_FIELD_BASE_INFO > > SEQ_FIELD_BASE_INFO_var;
    typedef OB::SeqOut< OB::FixSeq< FIELD_BASE_INFO, OBUnique_SEQ_FIELD_BASE_INFO > > SEQ_FIELD_BASE_INFO_out;
    static OB::TypeCodeConst _tc_SEQ_FIELD_BASE_INFO;

    struct OBInfo_SEQ_FIELD_BASE_INFO : public OB::ConstructedInfo
    {
        OBInfo_SEQ_FIELD_BASE_INFO() { }

        virtual void free(void* p) const
        {
            delete (SEQ_FIELD_BASE_INFO*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_FIELD_BASE_INFO(*(const SEQ_FIELD_BASE_INFO*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/FIELD_STRU:1.0
    //
    struct FIELD_STRU;
    typedef OB::FixVar< FIELD_STRU > FIELD_STRU_var;
    typedef FIELD_STRU& FIELD_STRU_out;

    struct FIELD_STRU
    {
        typedef FIELD_STRU_var _var_type;

        ::CORBA::Short field_no;
        ::CORBA::Short field_type;
        ::CORBA::Short field_length;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(FIELD_STRU&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_FIELD_STRU;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_FIELD_STRU:1.0
    //
    class OBUnique_SEQ_FIELD_STRU { };

    typedef OB::FixSeq< FIELD_STRU, OBUnique_SEQ_FIELD_STRU > SEQ_FIELD_STRU;
    typedef OB::SeqVar< OB::FixSeq< FIELD_STRU, OBUnique_SEQ_FIELD_STRU > > SEQ_FIELD_STRU_var;
    typedef OB::SeqOut< OB::FixSeq< FIELD_STRU, OBUnique_SEQ_FIELD_STRU > > SEQ_FIELD_STRU_out;
    static OB::TypeCodeConst _tc_SEQ_FIELD_STRU;

    struct OBInfo_SEQ_FIELD_STRU : public OB::ConstructedInfo
    {
        OBInfo_SEQ_FIELD_STRU() { }

        virtual void free(void* p) const
        {
            delete (SEQ_FIELD_STRU*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_FIELD_STRU(*(const SEQ_FIELD_STRU*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_BASE:1.0
    //
    struct REQ_BASE;
    typedef OB::VarVar< REQ_BASE > REQ_BASE_var;
    typedef OB::VarOut< REQ_BASE > REQ_BASE_out;

    struct REQ_BASE
    {
#ifdef OB_CLEAR_MEM
        REQ_BASE();
#else
        REQ_BASE() { }
#endif
        REQ_BASE(const REQ_BASE&);
        REQ_BASE& operator=(const REQ_BASE&);

        typedef REQ_BASE_var _var_type;

        ::CORBA::Short context_no;
        ::CORBA::Long app_no;
        ::CORBA::Long table_no;
        ::CORBA::Char byte_tag;
        SEQ_FIELD_STRU seq_field;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_BASE&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_BASE;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_READ:1.0
    //
    struct REQ_READ;
    typedef OB::VarVar< REQ_READ > REQ_READ_var;
    typedef OB::VarOut< REQ_READ > REQ_READ_out;

    struct REQ_READ
    {
#ifdef OB_CLEAR_MEM
        REQ_READ();
#else
        REQ_READ() { }
#endif
        REQ_READ(const REQ_READ&);
        REQ_READ& operator=(const REQ_READ&);

        typedef REQ_READ_var _var_type;

        REQ_BASE base_info;
        SEQ_CHAR seq_keyword;
        ::CORBA::Long keybuf_size;
        OB::StrForStruct str_fname_list;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_READ&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_READ;

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_READ:1.0
    //
    struct RSP_READ;
    typedef OB::VarVar< RSP_READ > RSP_READ_var;
    typedef OB::VarOut< RSP_READ > RSP_READ_out;

    struct RSP_READ
    {
#ifdef OB_CLEAR_MEM
        RSP_READ();
#else
        RSP_READ() { }
#endif
        RSP_READ(const RSP_READ&);
        RSP_READ& operator=(const RSP_READ&);

        typedef RSP_READ_var _var_type;

        ::CORBA::Long record_num;
        ::CORBA::Long record_size;
        ::CORBA::Short field_num;
        SEQ_FIELD_STRU seq_field;
        SEQ_CHAR seq_data;
        ::CORBA::Long data_size;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_READ&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_READ;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_KEY_WRITE:1.0
    //
    struct REQ_KEY_WRITE;
    typedef OB::VarVar< REQ_KEY_WRITE > REQ_KEY_WRITE_var;
    typedef OB::VarOut< REQ_KEY_WRITE > REQ_KEY_WRITE_out;

    struct REQ_KEY_WRITE
    {
#ifdef OB_CLEAR_MEM
        REQ_KEY_WRITE();
#else
        REQ_KEY_WRITE() { }
#endif
        REQ_KEY_WRITE(const REQ_KEY_WRITE&);
        REQ_KEY_WRITE& operator=(const REQ_KEY_WRITE&);

        typedef REQ_KEY_WRITE_var _var_type;

        REQ_BASE base_info;
        SEQ_CHAR record_value;
        ::CORBA::Long buf_size;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_KEY_WRITE&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_KEY_WRITE;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_MODIFY:1.0
    //
    struct REQ_MODIFY;
    typedef OB::VarVar< REQ_MODIFY > REQ_MODIFY_var;
    typedef OB::VarOut< REQ_MODIFY > REQ_MODIFY_out;

    struct REQ_MODIFY
    {
#ifdef OB_CLEAR_MEM
        REQ_MODIFY();
#else
        REQ_MODIFY() { }
#endif
        REQ_MODIFY(const REQ_MODIFY&);
        REQ_MODIFY& operator=(const REQ_MODIFY&);

        typedef REQ_MODIFY_var _var_type;

        REQ_BASE base_info;
        ::CORBA::Short is_field_name;
        OB::StrForStruct field_name_str;
        SEQ_CHAR seq_keyword;
        ::CORBA::Long keybuf_size;
        SEQ_CHAR field_value;
        ::CORBA::Long buf_size;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_MODIFY&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_MODIFY;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_UPDATE:1.0
    //
    struct REQ_UPDATE;
    typedef OB::VarVar< REQ_UPDATE > REQ_UPDATE_var;
    typedef OB::VarOut< REQ_UPDATE > REQ_UPDATE_out;

    struct REQ_UPDATE
    {
#ifdef OB_CLEAR_MEM
        REQ_UPDATE();
#else
        REQ_UPDATE() { }
#endif
        REQ_UPDATE(const REQ_UPDATE&);
        REQ_UPDATE& operator=(const REQ_UPDATE&);

        typedef REQ_UPDATE_var _var_type;

        REQ_BASE base_info;
        SEQ_CHAR field_value;
        ::CORBA::Long buf_size;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_UPDATE&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_UPDATE;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_KEY_ERASE:1.0
    //
    struct REQ_KEY_ERASE;
    typedef OB::VarVar< REQ_KEY_ERASE > REQ_KEY_ERASE_var;
    typedef OB::VarOut< REQ_KEY_ERASE > REQ_KEY_ERASE_out;

    struct REQ_KEY_ERASE
    {
#ifdef OB_CLEAR_MEM
        REQ_KEY_ERASE();
#else
        REQ_KEY_ERASE() { }
#endif
        REQ_KEY_ERASE(const REQ_KEY_ERASE&);
        REQ_KEY_ERASE& operator=(const REQ_KEY_ERASE&);

        typedef REQ_KEY_ERASE_var _var_type;

        REQ_BASE base_info;
        SEQ_CHAR seq_keyword;
        ::CORBA::Long keybuf_size;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_KEY_ERASE&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_KEY_ERASE;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_TABLE_CLEAR:1.0
    //
    struct REQ_TABLE_CLEAR;
    typedef OB::VarVar< REQ_TABLE_CLEAR > REQ_TABLE_CLEAR_var;
    typedef OB::VarOut< REQ_TABLE_CLEAR > REQ_TABLE_CLEAR_out;

    struct REQ_TABLE_CLEAR
    {
        REQ_TABLE_CLEAR() { }
        REQ_TABLE_CLEAR(const REQ_TABLE_CLEAR&);
        REQ_TABLE_CLEAR& operator=(const REQ_TABLE_CLEAR&);

        typedef REQ_TABLE_CLEAR_var _var_type;

        REQ_BASE base_info;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_TABLE_CLEAR&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_TABLE_CLEAR;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_FIELD_BASE_INFO:1.0
    //
    struct REQ_FIELD_BASE_INFO;
    typedef OB::VarVar< REQ_FIELD_BASE_INFO > REQ_FIELD_BASE_INFO_var;
    typedef OB::VarOut< REQ_FIELD_BASE_INFO > REQ_FIELD_BASE_INFO_out;

    struct REQ_FIELD_BASE_INFO
    {
        REQ_FIELD_BASE_INFO() { }
        REQ_FIELD_BASE_INFO(const REQ_FIELD_BASE_INFO&);
        REQ_FIELD_BASE_INFO& operator=(const REQ_FIELD_BASE_INFO&);

        typedef REQ_FIELD_BASE_INFO_var _var_type;

        REQ_BASE base_info;
        SEQ_LONG seq_field_no;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_FIELD_BASE_INFO&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_FIELD_BASE_INFO;

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_FIELD_BASE_INFO:1.0
    //
    struct RSP_FIELD_BASE_INFO;
    typedef OB::VarVar< RSP_FIELD_BASE_INFO > RSP_FIELD_BASE_INFO_var;
    typedef OB::VarOut< RSP_FIELD_BASE_INFO > RSP_FIELD_BASE_INFO_out;

    struct RSP_FIELD_BASE_INFO
    {
        RSP_FIELD_BASE_INFO() { }
        RSP_FIELD_BASE_INFO(const RSP_FIELD_BASE_INFO&);
        RSP_FIELD_BASE_INFO& operator=(const RSP_FIELD_BASE_INFO&);

        typedef RSP_FIELD_BASE_INFO_var _var_type;

        SEQ_FIELD_BASE_INFO lseq_field_base_info;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_FIELD_BASE_INFO&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_FIELD_BASE_INFO;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_PARAMETER:1.0
    //
    struct REQ_PARAMETER;
    typedef OB::VarVar< REQ_PARAMETER > REQ_PARAMETER_var;
    typedef OB::VarOut< REQ_PARAMETER > REQ_PARAMETER_out;

    struct REQ_PARAMETER
    {
        REQ_PARAMETER() { }
        REQ_PARAMETER(const REQ_PARAMETER&);
        REQ_PARAMETER& operator=(const REQ_PARAMETER&);

        typedef REQ_PARAMETER_var _var_type;

        REQ_BASE base_info;
        OB::StrForStruct str_field_list;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_PARAMETER&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_PARAMETER;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_FIELD_PARAMETER:1.0
    //
    class OBUnique_SEQ_FIELD_PARAMETER { };

    typedef OB::VarSeq< FIELD_PARAMETER, OBUnique_SEQ_FIELD_PARAMETER > SEQ_FIELD_PARAMETER;
    typedef OB::SeqVar< OB::VarSeq< FIELD_PARAMETER, OBUnique_SEQ_FIELD_PARAMETER > > SEQ_FIELD_PARAMETER_var;
    typedef OB::SeqOut< OB::VarSeq< FIELD_PARAMETER, OBUnique_SEQ_FIELD_PARAMETER > > SEQ_FIELD_PARAMETER_out;
    static OB::TypeCodeConst _tc_SEQ_FIELD_PARAMETER;

    struct OBInfo_SEQ_FIELD_PARAMETER : public OB::ConstructedInfo
    {
        OBInfo_SEQ_FIELD_PARAMETER() { }

        virtual void free(void* p) const
        {
            delete (SEQ_FIELD_PARAMETER*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_FIELD_PARAMETER(*(const SEQ_FIELD_PARAMETER*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_PARAMETER:1.0
    //
    struct RSP_PARAMETER;
    typedef OB::VarVar< RSP_PARAMETER > RSP_PARAMETER_var;
    typedef OB::VarOut< RSP_PARAMETER > RSP_PARAMETER_out;

    struct RSP_PARAMETER
    {
        RSP_PARAMETER() { }
        RSP_PARAMETER(const RSP_PARAMETER&);
        RSP_PARAMETER& operator=(const RSP_PARAMETER&);

        typedef RSP_PARAMETER_var _var_type;

        TABLE_PARAMETER table_para;
        SEQ_FIELD_PARAMETER seq_field_para;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_PARAMETER&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_PARAMETER;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_APP_PARAMETER:1.0
    //
    struct REQ_APP_PARAMETER;
    typedef OB::VarVar< REQ_APP_PARAMETER > REQ_APP_PARAMETER_var;
    typedef OB::VarOut< REQ_APP_PARAMETER > REQ_APP_PARAMETER_out;

    struct REQ_APP_PARAMETER
    {
#ifdef OB_CLEAR_MEM
        REQ_APP_PARAMETER();
#else
        REQ_APP_PARAMETER() { }
#endif
        REQ_APP_PARAMETER(const REQ_APP_PARAMETER&);
        REQ_APP_PARAMETER& operator=(const REQ_APP_PARAMETER&);

        typedef REQ_APP_PARAMETER_var _var_type;

        ::CORBA::Long app_no;
        OB::StrForStruct app_name;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_APP_PARAMETER&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_APP_PARAMETER;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_TABLE_PARAMETER:1.0
    //
    class OBUnique_SEQ_TABLE_PARAMETER { };

    typedef OB::VarSeq< TABLE_PARAMETER, OBUnique_SEQ_TABLE_PARAMETER > SEQ_TABLE_PARAMETER;
    typedef OB::SeqVar< OB::VarSeq< TABLE_PARAMETER, OBUnique_SEQ_TABLE_PARAMETER > > SEQ_TABLE_PARAMETER_var;
    typedef OB::SeqOut< OB::VarSeq< TABLE_PARAMETER, OBUnique_SEQ_TABLE_PARAMETER > > SEQ_TABLE_PARAMETER_out;
    static OB::TypeCodeConst _tc_SEQ_TABLE_PARAMETER;

    struct OBInfo_SEQ_TABLE_PARAMETER : public OB::ConstructedInfo
    {
        OBInfo_SEQ_TABLE_PARAMETER() { }

        virtual void free(void* p) const
        {
            delete (SEQ_TABLE_PARAMETER*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_TABLE_PARAMETER(*(const SEQ_TABLE_PARAMETER*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_APP_PARAMETER:1.0
    //
    struct RSP_APP_PARAMETER;
    typedef OB::VarVar< RSP_APP_PARAMETER > RSP_APP_PARAMETER_var;
    typedef OB::VarOut< RSP_APP_PARAMETER > RSP_APP_PARAMETER_out;

    struct RSP_APP_PARAMETER
    {
#ifdef OB_CLEAR_MEM
        RSP_APP_PARAMETER();
#else
        RSP_APP_PARAMETER() { }
#endif
        RSP_APP_PARAMETER(const RSP_APP_PARAMETER&);
        RSP_APP_PARAMETER& operator=(const RSP_APP_PARAMETER&);

        typedef RSP_APP_PARAMETER_var _var_type;

        ::CORBA::Long app_no;
        OB::StrForStruct app_name;
        SEQ_TABLE_PARAMETER seq_table_para;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_APP_PARAMETER&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_APP_PARAMETER;

    //
    // IDL:ODB_CORBA/CODB_NET/TABLE_KEYINFO:1.0
    //
    struct TABLE_KEYINFO;
    typedef OB::FixVar< TABLE_KEYINFO > TABLE_KEYINFO_var;
    typedef TABLE_KEYINFO& TABLE_KEYINFO_out;

    struct TABLE_KEYINFO
    {
        typedef TABLE_KEYINFO_var _var_type;

        ::CORBA::Short keyword_len;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(TABLE_KEYINFO&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_TABLE_KEYINFO;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_TABLE_KEYINFO:1.0
    //
    class OBUnique_SEQ_TABLE_KEYINFO { };

    typedef OB::FixSeq< TABLE_KEYINFO, OBUnique_SEQ_TABLE_KEYINFO > SEQ_TABLE_KEYINFO;
    typedef OB::SeqVar< OB::FixSeq< TABLE_KEYINFO, OBUnique_SEQ_TABLE_KEYINFO > > SEQ_TABLE_KEYINFO_var;
    typedef OB::SeqOut< OB::FixSeq< TABLE_KEYINFO, OBUnique_SEQ_TABLE_KEYINFO > > SEQ_TABLE_KEYINFO_out;
    static OB::TypeCodeConst _tc_SEQ_TABLE_KEYINFO;

    struct OBInfo_SEQ_TABLE_KEYINFO : public OB::ConstructedInfo
    {
        OBInfo_SEQ_TABLE_KEYINFO() { }

        virtual void free(void* p) const
        {
            delete (SEQ_TABLE_KEYINFO*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_TABLE_KEYINFO(*(const SEQ_TABLE_KEYINFO*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_KEYINFO:1.0
    //
    struct RSP_KEYINFO;
    typedef OB::VarVar< RSP_KEYINFO > RSP_KEYINFO_var;
    typedef OB::VarOut< RSP_KEYINFO > RSP_KEYINFO_out;

    struct RSP_KEYINFO
    {
        RSP_KEYINFO() { }
        RSP_KEYINFO(const RSP_KEYINFO&);
        RSP_KEYINFO& operator=(const RSP_KEYINFO&);

        typedef RSP_KEYINFO_var _var_type;

        SEQ_TABLE_KEYINFO seq_keyinfo;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_KEYINFO&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_KEYINFO;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_SQL:1.0
    //
    struct REQ_SQL;
    typedef OB::VarVar< REQ_SQL > REQ_SQL_var;
    typedef OB::VarOut< REQ_SQL > REQ_SQL_out;

    struct REQ_SQL
    {
        REQ_SQL() { }
        REQ_SQL(const REQ_SQL&);
        REQ_SQL& operator=(const REQ_SQL&);

        typedef REQ_SQL_var _var_type;

        REQ_BASE base_info;
        OB::StrForStruct str_select;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_SQL&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_SQL;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_MENU:1.0
    //
    struct REQ_MENU;
    typedef OB::VarVar< REQ_MENU > REQ_MENU_var;
    typedef OB::VarOut< REQ_MENU > REQ_MENU_out;

    struct REQ_MENU
    {
#ifdef OB_CLEAR_MEM
        REQ_MENU();
#else
        REQ_MENU() { }
#endif
        REQ_MENU(const REQ_MENU&);
        REQ_MENU& operator=(const REQ_MENU&);

        typedef REQ_MENU_var _var_type;

        REQ_BASE base_info;
        OB::StrForStruct str_menu_name;
        ::CORBA::Octet menu_status;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_MENU&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_MENU;

    //
    // IDL:ODB_CORBA/CODB_NET/MENU_INFO_STRU:1.0
    //
    struct MENU_INFO_STRU;
    typedef OB::VarVar< MENU_INFO_STRU > MENU_INFO_STRU_var;
    typedef OB::VarOut< MENU_INFO_STRU > MENU_INFO_STRU_out;

    struct MENU_INFO_STRU
    {
#ifdef OB_CLEAR_MEM
        MENU_INFO_STRU();
#else
        MENU_INFO_STRU() { }
#endif
        MENU_INFO_STRU(const MENU_INFO_STRU&);
        MENU_INFO_STRU& operator=(const MENU_INFO_STRU&);

        typedef MENU_INFO_STRU_var _var_type;

        OB::StrForStruct menu_name;
        ::CORBA::Octet menu_no;
        ::CORBA::Long actual_value;
        OB::StrForStruct display_value;
        ::CORBA::Octet menu_status;
        OB::StrForStruct menu_macro_name;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(MENU_INFO_STRU&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_MENU_INFO_STRU;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_MENU_INFO:1.0
    //
    class OBUnique_SEQ_MENU_INFO { };

    typedef OB::VarSeq< MENU_INFO_STRU, OBUnique_SEQ_MENU_INFO > SEQ_MENU_INFO;
    typedef OB::SeqVar< OB::VarSeq< MENU_INFO_STRU, OBUnique_SEQ_MENU_INFO > > SEQ_MENU_INFO_var;
    typedef OB::SeqOut< OB::VarSeq< MENU_INFO_STRU, OBUnique_SEQ_MENU_INFO > > SEQ_MENU_INFO_out;
    static OB::TypeCodeConst _tc_SEQ_MENU_INFO;

    struct OBInfo_SEQ_MENU_INFO : public OB::ConstructedInfo
    {
        OBInfo_SEQ_MENU_INFO() { }

        virtual void free(void* p) const
        {
            delete (SEQ_MENU_INFO*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_MENU_INFO(*(const SEQ_MENU_INFO*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_MENU:1.0
    //
    struct RSP_MENU;
    typedef OB::VarVar< RSP_MENU > RSP_MENU_var;
    typedef OB::VarOut< RSP_MENU > RSP_MENU_out;

    struct RSP_MENU
    {
#ifdef OB_CLEAR_MEM
        RSP_MENU();
#else
        RSP_MENU() { }
#endif
        RSP_MENU(const RSP_MENU&);
        RSP_MENU& operator=(const RSP_MENU&);

        typedef RSP_MENU_var _var_type;

        ::CORBA::Long menu_num;
        SEQ_MENU_INFO seq_menu;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_MENU&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_MENU;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_RELE_MENU:1.0
    //
    struct REQ_RELE_MENU;
    typedef OB::VarVar< REQ_RELE_MENU > REQ_RELE_MENU_var;
    typedef OB::VarOut< REQ_RELE_MENU > REQ_RELE_MENU_out;

    struct REQ_RELE_MENU
    {
        REQ_RELE_MENU() { }
        REQ_RELE_MENU(const REQ_RELE_MENU&);
        REQ_RELE_MENU& operator=(const REQ_RELE_MENU&);

        typedef REQ_RELE_MENU_var _var_type;

        REQ_BASE base_info;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_RELE_MENU&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_RELE_MENU;

    //
    // IDL:ODB_CORBA/CODB_NET/MENU_RELEVANT_STRU:1.0
    //
    struct MENU_RELEVANT_STRU;
    typedef OB::VarVar< MENU_RELEVANT_STRU > MENU_RELEVANT_STRU_var;
    typedef OB::VarOut< MENU_RELEVANT_STRU > MENU_RELEVANT_STRU_out;

    struct MENU_RELEVANT_STRU
    {
#ifdef OB_CLEAR_MEM
        MENU_RELEVANT_STRU();
#else
        MENU_RELEVANT_STRU() { }
#endif
        MENU_RELEVANT_STRU(const MENU_RELEVANT_STRU&);
        MENU_RELEVANT_STRU& operator=(const MENU_RELEVANT_STRU&);

        typedef MENU_RELEVANT_STRU_var _var_type;

        ::CORBA::Long table_id;
        ::CORBA::Short column_id;
        ::CORBA::Long column_value;
        ::CORBA::Short r_column_id;
        OB::StrForStruct r_menu_name;
        ::CORBA::Long default_value;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(MENU_RELEVANT_STRU&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_MENU_RELEVANT_STRU;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_MENU_RELEVANT:1.0
    //
    class OBUnique_SEQ_MENU_RELEVANT { };

    typedef OB::VarSeq< MENU_RELEVANT_STRU, OBUnique_SEQ_MENU_RELEVANT > SEQ_MENU_RELEVANT;
    typedef OB::SeqVar< OB::VarSeq< MENU_RELEVANT_STRU, OBUnique_SEQ_MENU_RELEVANT > > SEQ_MENU_RELEVANT_var;
    typedef OB::SeqOut< OB::VarSeq< MENU_RELEVANT_STRU, OBUnique_SEQ_MENU_RELEVANT > > SEQ_MENU_RELEVANT_out;
    static OB::TypeCodeConst _tc_SEQ_MENU_RELEVANT;

    struct OBInfo_SEQ_MENU_RELEVANT : public OB::ConstructedInfo
    {
        OBInfo_SEQ_MENU_RELEVANT() { }

        virtual void free(void* p) const
        {
            delete (SEQ_MENU_RELEVANT*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_MENU_RELEVANT(*(const SEQ_MENU_RELEVANT*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_RELE_MENU:1.0
    //
    struct RSP_RELE_MENU;
    typedef OB::VarVar< RSP_RELE_MENU > RSP_RELE_MENU_var;
    typedef OB::VarOut< RSP_RELE_MENU > RSP_RELE_MENU_out;

    struct RSP_RELE_MENU
    {
#ifdef OB_CLEAR_MEM
        RSP_RELE_MENU();
#else
        RSP_RELE_MENU() { }
#endif
        RSP_RELE_MENU(const RSP_RELE_MENU&);
        RSP_RELE_MENU& operator=(const RSP_RELE_MENU&);

        typedef RSP_RELE_MENU_var _var_type;

        ::CORBA::Long menu_num;
        SEQ_MENU_RELEVANT seq_menu;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_RELE_MENU&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_RELE_MENU;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_NAME_STRING:1.0
    //
    struct REQ_NAME_STRING;
    typedef OB::VarVar< REQ_NAME_STRING > REQ_NAME_STRING_var;
    typedef OB::VarOut< REQ_NAME_STRING > REQ_NAME_STRING_out;

    struct REQ_NAME_STRING
    {
#ifdef OB_CLEAR_MEM
        REQ_NAME_STRING();
#else
        REQ_NAME_STRING() { }
#endif
        REQ_NAME_STRING(const REQ_NAME_STRING&);
        REQ_NAME_STRING& operator=(const REQ_NAME_STRING&);

        typedef REQ_NAME_STRING_var _var_type;

        ::CORBA::Short req_type;
        REQ_BASE base_info;
        KEYID_STRUCT keyid_stru;
        ::CORBA::Long reference_id;
        SEQ_CHAR seq_keyword;
        ::CORBA::Long keybuf_size;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_NAME_STRING&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_NAME_STRING;

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_NAME_STRING:1.0
    //
    struct RSP_NAME_STRING;
    typedef OB::VarVar< RSP_NAME_STRING > RSP_NAME_STRING_var;
    typedef OB::VarOut< RSP_NAME_STRING > RSP_NAME_STRING_out;

    struct RSP_NAME_STRING
    {
#ifdef OB_CLEAR_MEM
        RSP_NAME_STRING();
#else
        RSP_NAME_STRING() { }
#endif
        RSP_NAME_STRING(const RSP_NAME_STRING&);
        RSP_NAME_STRING& operator=(const RSP_NAME_STRING&);

        typedef RSP_NAME_STRING_var _var_type;

        ::CORBA::Long name_len;
        OB::StrForStruct ref_string;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_NAME_STRING&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_NAME_STRING;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_MULTI_NAME_STRING:1.0
    //
    struct REQ_MULTI_NAME_STRING;
    typedef OB::VarVar< REQ_MULTI_NAME_STRING > REQ_MULTI_NAME_STRING_var;
    typedef OB::VarOut< REQ_MULTI_NAME_STRING > REQ_MULTI_NAME_STRING_out;

    struct REQ_MULTI_NAME_STRING
    {
#ifdef OB_CLEAR_MEM
        REQ_MULTI_NAME_STRING();
#else
        REQ_MULTI_NAME_STRING() { }
#endif
        REQ_MULTI_NAME_STRING(const REQ_MULTI_NAME_STRING&);
        REQ_MULTI_NAME_STRING& operator=(const REQ_MULTI_NAME_STRING&);

        typedef REQ_MULTI_NAME_STRING_var _var_type;

        ::CORBA::Short req_type;
        REQ_BASE base_info;
        SEQ_KEY_ID seq_keyid_stru;
        SEQ_APPKEY_ID seq_appkeyid_stru;
        SEQ_APP_ID seq_appid_stru;
        class OBUnique_seq_id { };
        typedef OB::FixSeq< ::CORBA::Long, OBUnique_seq_id > _seq_id_seq;
        _seq_id_seq seq_id;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_MULTI_NAME_STRING&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_MULTI_NAME_STRING;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_RSP_NAME_STRING:1.0
    //
    class OBUnique_SEQ_RSP_NAME_STRING { };

    typedef OB::VarSeq< RSP_NAME_STRING, OBUnique_SEQ_RSP_NAME_STRING > SEQ_RSP_NAME_STRING;
    typedef OB::SeqVar< OB::VarSeq< RSP_NAME_STRING, OBUnique_SEQ_RSP_NAME_STRING > > SEQ_RSP_NAME_STRING_var;
    typedef OB::SeqOut< OB::VarSeq< RSP_NAME_STRING, OBUnique_SEQ_RSP_NAME_STRING > > SEQ_RSP_NAME_STRING_out;
    static OB::TypeCodeConst _tc_SEQ_RSP_NAME_STRING;

    struct OBInfo_SEQ_RSP_NAME_STRING : public OB::ConstructedInfo
    {
        OBInfo_SEQ_RSP_NAME_STRING() { }

        virtual void free(void* p) const
        {
            delete (SEQ_RSP_NAME_STRING*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_RSP_NAME_STRING(*(const SEQ_RSP_NAME_STRING*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_MULTI_NAME_STRING:1.0
    //
    struct RSP_MULTI_NAME_STRING;
    typedef OB::VarVar< RSP_MULTI_NAME_STRING > RSP_MULTI_NAME_STRING_var;
    typedef OB::VarOut< RSP_MULTI_NAME_STRING > RSP_MULTI_NAME_STRING_out;

    struct RSP_MULTI_NAME_STRING
    {
        RSP_MULTI_NAME_STRING() { }
        RSP_MULTI_NAME_STRING(const RSP_MULTI_NAME_STRING&);
        RSP_MULTI_NAME_STRING& operator=(const RSP_MULTI_NAME_STRING&);

        typedef RSP_MULTI_NAME_STRING_var _var_type;

        SEQ_RSP_NAME_STRING seq_name_string;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_MULTI_NAME_STRING&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_MULTI_NAME_STRING;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_REF_MENU:1.0
    //
    struct REQ_REF_MENU;
    typedef OB::VarVar< REQ_REF_MENU > REQ_REF_MENU_var;
    typedef OB::VarOut< REQ_REF_MENU > REQ_REF_MENU_out;

    struct REQ_REF_MENU
    {
        REQ_REF_MENU() { }
        REQ_REF_MENU(const REQ_REF_MENU&);
        REQ_REF_MENU& operator=(const REQ_REF_MENU&);

        typedef REQ_REF_MENU_var _var_type;

        REQ_BASE base_info;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_REF_MENU&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_REF_MENU;

    //
    // IDL:ODB_CORBA/CODB_NET/REF_MENU_STRING:1.0
    //
    struct REF_MENU_STRING;
    typedef OB::VarVar< REF_MENU_STRING > REF_MENU_STRING_var;
    typedef OB::VarOut< REF_MENU_STRING > REF_MENU_STRING_out;

    struct REF_MENU_STRING
    {
#ifdef OB_CLEAR_MEM
        REF_MENU_STRING();
#else
        REF_MENU_STRING() { }
#endif
        REF_MENU_STRING(const REF_MENU_STRING&);
        REF_MENU_STRING& operator=(const REF_MENU_STRING&);

        typedef REF_MENU_STRING_var _var_type;

        ::CORBA::Long order_no;
        OB::StrForStruct menu_name;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REF_MENU_STRING&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REF_MENU_STRING;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_REF_MENU:1.0
    //
    class OBUnique_SEQ_REF_MENU { };

    typedef OB::VarSeq< REF_MENU_STRING, OBUnique_SEQ_REF_MENU > SEQ_REF_MENU;
    typedef OB::SeqVar< OB::VarSeq< REF_MENU_STRING, OBUnique_SEQ_REF_MENU > > SEQ_REF_MENU_var;
    typedef OB::SeqOut< OB::VarSeq< REF_MENU_STRING, OBUnique_SEQ_REF_MENU > > SEQ_REF_MENU_out;
    static OB::TypeCodeConst _tc_SEQ_REF_MENU;

    struct OBInfo_SEQ_REF_MENU : public OB::ConstructedInfo
    {
        OBInfo_SEQ_REF_MENU() { }

        virtual void free(void* p) const
        {
            delete (SEQ_REF_MENU*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_REF_MENU(*(const SEQ_REF_MENU*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_REF_MENU:1.0
    //
    struct RSP_REF_MENU;
    typedef OB::VarVar< RSP_REF_MENU > RSP_REF_MENU_var;
    typedef OB::VarOut< RSP_REF_MENU > RSP_REF_MENU_out;

    struct RSP_REF_MENU
    {
        RSP_REF_MENU() { }
        RSP_REF_MENU(const RSP_REF_MENU&);
        RSP_REF_MENU& operator=(const RSP_REF_MENU&);

        typedef RSP_REF_MENU_var _var_type;

        SEQ_REF_MENU seq_menu;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_REF_MENU&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_REF_MENU;

    //
    // IDL:ODB_CORBA/CODB_NET/GRAPH_SIMPLE_REQ:1.0
    //
    struct GRAPH_SIMPLE_REQ;
    typedef OB::FixVar< GRAPH_SIMPLE_REQ > GRAPH_SIMPLE_REQ_var;
    typedef GRAPH_SIMPLE_REQ& GRAPH_SIMPLE_REQ_out;

    struct GRAPH_SIMPLE_REQ
    {
        typedef GRAPH_SIMPLE_REQ_var _var_type;

        ::CORBA::Long order_no;
        ::CORBA::Long keyword_id;
        ::CORBA::Short table_no;
        ::CORBA::Short field_no;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(GRAPH_SIMPLE_REQ&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_GRAPH_SIMPLE_REQ;

    //
    // IDL:ODB_CORBA/CODB_NET/GRAPH_XY_REQ:1.0
    //
    struct GRAPH_XY_REQ;
    typedef OB::FixVar< GRAPH_XY_REQ > GRAPH_XY_REQ_var;
    typedef GRAPH_XY_REQ& GRAPH_XY_REQ_out;

    struct GRAPH_XY_REQ
    {
        typedef GRAPH_XY_REQ_var _var_type;

        ::CORBA::Long order_no;
        ::CORBA::Long keyword_id;
        ::CORBA::Short table_no;
        ::CORBA::Short field_no;
        ::CORBA::Octet mode;
        ::CORBA::Short data_num;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(GRAPH_XY_REQ&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_GRAPH_XY_REQ;

    //
    // IDL:ODB_CORBA/CODB_NET/GRAPH_FIELD_STRU:1.0
    //
    struct GRAPH_FIELD_STRU;
    typedef OB::VarVar< GRAPH_FIELD_STRU > GRAPH_FIELD_STRU_var;
    typedef OB::VarOut< GRAPH_FIELD_STRU > GRAPH_FIELD_STRU_out;

    #ifndef _WINDOWS32
	struct GRAPH_FIELD_STRU
    #else
	struct ODB_API_LIB_API GRAPH_FIELD_STRU
    #endif
    {
#ifdef OB_CLEAR_MEM
        GRAPH_FIELD_STRU();
#else
        GRAPH_FIELD_STRU() { }
#endif
        GRAPH_FIELD_STRU(const GRAPH_FIELD_STRU&);
        GRAPH_FIELD_STRU& operator=(const GRAPH_FIELD_STRU&);

        typedef GRAPH_FIELD_STRU_var _var_type;

        ::CORBA::Long order_no;
        ::CORBA::Short field_no;
        OB::StrForStruct field_alias;
        ::CORBA::Short rele1_table_no;
        ::CORBA::Short rele1_field_no;
        ::CORBA::Short rele2_table_no;
        ::CORBA::Short rele2_field_no;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(GRAPH_FIELD_STRU&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_GRAPH_FIELD_STRU;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_GRAPH_FIELD:1.0
    //
    class OBUnique_SEQ_GRAPH_FIELD { };

    typedef OB::VarSeq< GRAPH_FIELD_STRU, OBUnique_SEQ_GRAPH_FIELD > SEQ_GRAPH_FIELD;
    typedef OB::SeqVar< OB::VarSeq< GRAPH_FIELD_STRU, OBUnique_SEQ_GRAPH_FIELD > > SEQ_GRAPH_FIELD_var;
    typedef OB::SeqOut< OB::VarSeq< GRAPH_FIELD_STRU, OBUnique_SEQ_GRAPH_FIELD > > SEQ_GRAPH_FIELD_out;
    static OB::TypeCodeConst _tc_SEQ_GRAPH_FIELD;

    struct OBInfo_SEQ_GRAPH_FIELD : public OB::ConstructedInfo
    {
        OBInfo_SEQ_GRAPH_FIELD() { }

        virtual void free(void* p) const
        {
            delete (SEQ_GRAPH_FIELD*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_GRAPH_FIELD(*(const SEQ_GRAPH_FIELD*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/GRAPH_LIST_REQ:1.0
    //
    struct GRAPH_LIST_REQ;
    typedef OB::VarVar< GRAPH_LIST_REQ > GRAPH_LIST_REQ_var;
    typedef OB::VarOut< GRAPH_LIST_REQ > GRAPH_LIST_REQ_out;

    #ifndef _WINDOWS32
    struct GRAPH_LIST_REQ
    #else
    struct ODB_API_LIB_API GRAPH_LIST_REQ
    #endif 
    {
#ifdef OB_CLEAR_MEM
        GRAPH_LIST_REQ();
#else
        GRAPH_LIST_REQ() { }
#endif
        GRAPH_LIST_REQ(const GRAPH_LIST_REQ&);
        GRAPH_LIST_REQ& operator=(const GRAPH_LIST_REQ&);

        typedef GRAPH_LIST_REQ_var _var_type;

        ::CORBA::Short table_no;
        OB::StrForStruct condition;
        SEQ_STRING where_field_seq;
        SEQ_GRAPH_FIELD seq_field;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(GRAPH_LIST_REQ&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_GRAPH_LIST_REQ;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_SIMPLE_REQ:1.0
    //
    class OBUnique_SEQ_SIMPLE_REQ { };

    typedef OB::FixSeq< GRAPH_SIMPLE_REQ, OBUnique_SEQ_SIMPLE_REQ > SEQ_SIMPLE_REQ;
    typedef OB::SeqVar< OB::FixSeq< GRAPH_SIMPLE_REQ, OBUnique_SEQ_SIMPLE_REQ > > SEQ_SIMPLE_REQ_var;
    typedef OB::SeqOut< OB::FixSeq< GRAPH_SIMPLE_REQ, OBUnique_SEQ_SIMPLE_REQ > > SEQ_SIMPLE_REQ_out;
    static OB::TypeCodeConst _tc_SEQ_SIMPLE_REQ;

    struct OBInfo_SEQ_SIMPLE_REQ : public OB::ConstructedInfo
    {
        OBInfo_SEQ_SIMPLE_REQ() { }

        virtual void free(void* p) const
        {
            delete (SEQ_SIMPLE_REQ*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_SIMPLE_REQ(*(const SEQ_SIMPLE_REQ*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_XY_REQ:1.0
    //
    class OBUnique_SEQ_XY_REQ { };

    typedef OB::FixSeq< GRAPH_XY_REQ, OBUnique_SEQ_XY_REQ > SEQ_XY_REQ;
    typedef OB::SeqVar< OB::FixSeq< GRAPH_XY_REQ, OBUnique_SEQ_XY_REQ > > SEQ_XY_REQ_var;
    typedef OB::SeqOut< OB::FixSeq< GRAPH_XY_REQ, OBUnique_SEQ_XY_REQ > > SEQ_XY_REQ_out;
    static OB::TypeCodeConst _tc_SEQ_XY_REQ;

    struct OBInfo_SEQ_XY_REQ : public OB::ConstructedInfo
    {
        OBInfo_SEQ_XY_REQ() { }

        virtual void free(void* p) const
        {
            delete (SEQ_XY_REQ*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_XY_REQ(*(const SEQ_XY_REQ*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_LIST_REQ:1.0
    //
    class OBUnique_SEQ_LIST_REQ { };

    typedef OB::VarSeq< GRAPH_LIST_REQ, OBUnique_SEQ_LIST_REQ > SEQ_LIST_REQ;
    typedef OB::SeqVar< OB::VarSeq< GRAPH_LIST_REQ, OBUnique_SEQ_LIST_REQ > > SEQ_LIST_REQ_var;
    typedef OB::SeqOut< OB::VarSeq< GRAPH_LIST_REQ, OBUnique_SEQ_LIST_REQ > > SEQ_LIST_REQ_out;
    static OB::TypeCodeConst _tc_SEQ_LIST_REQ;

    struct OBInfo_SEQ_LIST_REQ : public OB::ConstructedInfo
    {
        OBInfo_SEQ_LIST_REQ() { }

        virtual void free(void* p) const
        {
            delete (SEQ_LIST_REQ*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_LIST_REQ(*(const SEQ_LIST_REQ*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/GRAPH_REAL_REQ:1.0
    //
    struct GRAPH_REAL_REQ;
    typedef OB::VarVar< GRAPH_REAL_REQ > GRAPH_REAL_REQ_var;
    typedef OB::VarOut< GRAPH_REAL_REQ > GRAPH_REAL_REQ_out;

    struct GRAPH_REAL_REQ
    {
#ifdef OB_CLEAR_MEM
        GRAPH_REAL_REQ();
#else
        GRAPH_REAL_REQ() { }
#endif
        GRAPH_REAL_REQ(const GRAPH_REAL_REQ&);
        GRAPH_REAL_REQ& operator=(const GRAPH_REAL_REQ&);

        typedef GRAPH_REAL_REQ_var _var_type;

        ::CORBA::Long graph_id;
        ::CORBA::Long cal_type;
        SEQ_SIMPLE_REQ simple_req;
        SEQ_XY_REQ xy_req;
        SEQ_LIST_REQ list_req;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(GRAPH_REAL_REQ&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_GRAPH_REAL_REQ;

    //
    // IDL:ODB_CORBA/CODB_NET/GRAPH_REAL_ODB_REQ:1.0
    //
    struct GRAPH_REAL_ODB_REQ;
    typedef OB::VarVar< GRAPH_REAL_ODB_REQ > GRAPH_REAL_ODB_REQ_var;
    typedef OB::VarOut< GRAPH_REAL_ODB_REQ > GRAPH_REAL_ODB_REQ_out;

    struct GRAPH_REAL_ODB_REQ
    {
#ifdef OB_CLEAR_MEM
        GRAPH_REAL_ODB_REQ();
#else
        GRAPH_REAL_ODB_REQ() { }
#endif
        GRAPH_REAL_ODB_REQ(const GRAPH_REAL_ODB_REQ&);
        GRAPH_REAL_ODB_REQ& operator=(const GRAPH_REAL_ODB_REQ&);

        typedef GRAPH_REAL_ODB_REQ_var _var_type;

        REQ_BASE base_info;
        ::CORBA::Long graph_id;
        ::CORBA::Long cal_type;
        SEQ_SIMPLE_REQ simple_req;
        SEQ_XY_REQ xy_req;
        SEQ_LIST_REQ list_req;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(GRAPH_REAL_ODB_REQ&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_GRAPH_REAL_ODB_REQ;

    //
    // IDL:ODB_CORBA/CODB_NET/GRAPH_SIMPLE_RSP:1.0
    //
    struct GRAPH_SIMPLE_RSP;
    typedef OB::VarVar< GRAPH_SIMPLE_RSP > GRAPH_SIMPLE_RSP_var;
    typedef OB::VarOut< GRAPH_SIMPLE_RSP > GRAPH_SIMPLE_RSP_out;

    #ifndef _WINDOWS32
	struct GRAPH_SIMPLE_RSP
    #else
	struct ODB_API_LIB_API GRAPH_SIMPLE_RSP
    #endif
    {
#ifdef OB_CLEAR_MEM
        GRAPH_SIMPLE_RSP();
#else
        GRAPH_SIMPLE_RSP() { }
#endif
        GRAPH_SIMPLE_RSP(const GRAPH_SIMPLE_RSP&);
        GRAPH_SIMPLE_RSP& operator=(const GRAPH_SIMPLE_RSP&);

        typedef GRAPH_SIMPLE_RSP_var _var_type;

        ::CORBA::Long order_no;
        union_data_type data_value;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(GRAPH_SIMPLE_RSP&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_GRAPH_SIMPLE_RSP;

    //
    // IDL:ODB_CORBA/CODB_NET/GRAPH_XY_RSP:1.0
    //
    struct GRAPH_XY_RSP;
    typedef OB::VarVar< GRAPH_XY_RSP > GRAPH_XY_RSP_var;
    typedef OB::VarOut< GRAPH_XY_RSP > GRAPH_XY_RSP_out;

    #ifndef _WINDOWS32
	struct GRAPH_XY_RSP
    #else
	struct ODB_API_LIB_API GRAPH_XY_RSP
    #endif
    {
#ifdef OB_CLEAR_MEM
        GRAPH_XY_RSP();
#else
        GRAPH_XY_RSP() { }
#endif
        GRAPH_XY_RSP(const GRAPH_XY_RSP&);
        GRAPH_XY_RSP& operator=(const GRAPH_XY_RSP&);

        typedef GRAPH_XY_RSP_var _var_type;

        ::CORBA::Long order_no;
        SEQ_FLOAT seq_data_value;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(GRAPH_XY_RSP&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_GRAPH_XY_RSP;

    //
    // IDL:ODB_CORBA/CODB_NET/ORDER_VALUE:1.0
    //
    struct ORDER_VALUE;
    typedef OB::VarVar< ORDER_VALUE > ORDER_VALUE_var;
    typedef OB::VarOut< ORDER_VALUE > ORDER_VALUE_out;

    struct ORDER_VALUE
    {
#ifdef OB_CLEAR_MEM
        ORDER_VALUE();
#else
        ORDER_VALUE() { }
#endif
        ORDER_VALUE(const ORDER_VALUE&);
        ORDER_VALUE& operator=(const ORDER_VALUE&);

        typedef ORDER_VALUE_var _var_type;

        ::CORBA::Long order_no;
        SEQ_COMMON_DATA seq_data_value;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(ORDER_VALUE&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_ORDER_VALUE;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_ORDER_VALUE:1.0
    //
    class OBUnique_SEQ_ORDER_VALUE { };

    typedef OB::VarSeq< ORDER_VALUE, OBUnique_SEQ_ORDER_VALUE > SEQ_ORDER_VALUE;
    typedef OB::SeqVar< OB::VarSeq< ORDER_VALUE, OBUnique_SEQ_ORDER_VALUE > > SEQ_ORDER_VALUE_var;
    typedef OB::SeqOut< OB::VarSeq< ORDER_VALUE, OBUnique_SEQ_ORDER_VALUE > > SEQ_ORDER_VALUE_out;
    static OB::TypeCodeConst _tc_SEQ_ORDER_VALUE;

    struct OBInfo_SEQ_ORDER_VALUE : public OB::ConstructedInfo
    {
        OBInfo_SEQ_ORDER_VALUE() { }

        virtual void free(void* p) const
        {
            delete (SEQ_ORDER_VALUE*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_ORDER_VALUE(*(const SEQ_ORDER_VALUE*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/GRAPH_LIST_RSP:1.0
    //
    struct GRAPH_LIST_RSP;
    typedef OB::VarVar< GRAPH_LIST_RSP > GRAPH_LIST_RSP_var;
    typedef OB::VarOut< GRAPH_LIST_RSP > GRAPH_LIST_RSP_out;

    #ifndef _WINDOWS32
	struct GRAPH_LIST_RSP
    #else
	struct ODB_API_LIB_API GRAPH_LIST_RSP
    #endif
    {
        GRAPH_LIST_RSP() { }
        GRAPH_LIST_RSP(const GRAPH_LIST_RSP&);
        GRAPH_LIST_RSP& operator=(const GRAPH_LIST_RSP&);

        typedef GRAPH_LIST_RSP_var _var_type;

        SEQ_ORDER_VALUE seq_list;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(GRAPH_LIST_RSP&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_GRAPH_LIST_RSP;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_SIMPLE_RSP:1.0
    //
    class OBUnique_SEQ_SIMPLE_RSP { };

    typedef OB::VarSeq< GRAPH_SIMPLE_RSP, OBUnique_SEQ_SIMPLE_RSP > SEQ_SIMPLE_RSP;
    typedef OB::SeqVar< OB::VarSeq< GRAPH_SIMPLE_RSP, OBUnique_SEQ_SIMPLE_RSP > > SEQ_SIMPLE_RSP_var;
    typedef OB::SeqOut< OB::VarSeq< GRAPH_SIMPLE_RSP, OBUnique_SEQ_SIMPLE_RSP > > SEQ_SIMPLE_RSP_out;
    static OB::TypeCodeConst _tc_SEQ_SIMPLE_RSP;

    struct OBInfo_SEQ_SIMPLE_RSP : public OB::ConstructedInfo
    {
        OBInfo_SEQ_SIMPLE_RSP() { }

        virtual void free(void* p) const
        {
            delete (SEQ_SIMPLE_RSP*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_SIMPLE_RSP(*(const SEQ_SIMPLE_RSP*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_XY_RSP:1.0
    //
    class OBUnique_SEQ_XY_RSP { };

    typedef OB::VarSeq< GRAPH_XY_RSP, OBUnique_SEQ_XY_RSP > SEQ_XY_RSP;
    typedef OB::SeqVar< OB::VarSeq< GRAPH_XY_RSP, OBUnique_SEQ_XY_RSP > > SEQ_XY_RSP_var;
    typedef OB::SeqOut< OB::VarSeq< GRAPH_XY_RSP, OBUnique_SEQ_XY_RSP > > SEQ_XY_RSP_out;
    static OB::TypeCodeConst _tc_SEQ_XY_RSP;

    struct OBInfo_SEQ_XY_RSP : public OB::ConstructedInfo
    {
        OBInfo_SEQ_XY_RSP() { }

        virtual void free(void* p) const
        {
            delete (SEQ_XY_RSP*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_XY_RSP(*(const SEQ_XY_RSP*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_LIST_RSP:1.0
    //
    class OBUnique_SEQ_LIST_RSP { };

    typedef OB::VarSeq< GRAPH_LIST_RSP, OBUnique_SEQ_LIST_RSP > SEQ_LIST_RSP;
    typedef OB::SeqVar< OB::VarSeq< GRAPH_LIST_RSP, OBUnique_SEQ_LIST_RSP > > SEQ_LIST_RSP_var;
    typedef OB::SeqOut< OB::VarSeq< GRAPH_LIST_RSP, OBUnique_SEQ_LIST_RSP > > SEQ_LIST_RSP_out;
    static OB::TypeCodeConst _tc_SEQ_LIST_RSP;

    struct OBInfo_SEQ_LIST_RSP : public OB::ConstructedInfo
    {
        OBInfo_SEQ_LIST_RSP() { }

        virtual void free(void* p) const
        {
            delete (SEQ_LIST_RSP*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_LIST_RSP(*(const SEQ_LIST_RSP*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/GRAPH_REAL_RSP:1.0
    //
    struct GRAPH_REAL_RSP;
    typedef OB::VarVar< GRAPH_REAL_RSP > GRAPH_REAL_RSP_var;
    typedef OB::VarOut< GRAPH_REAL_RSP > GRAPH_REAL_RSP_out;

    struct GRAPH_REAL_RSP
    {
#ifdef OB_CLEAR_MEM
        GRAPH_REAL_RSP();
#else
        GRAPH_REAL_RSP() { }
#endif
        GRAPH_REAL_RSP(const GRAPH_REAL_RSP&);
        GRAPH_REAL_RSP& operator=(const GRAPH_REAL_RSP&);

        typedef GRAPH_REAL_RSP_var _var_type;

        ::CORBA::Long graph_id;
        ::CORBA::Long cal_type;
        SEQ_SIMPLE_RSP simple_rsp;
        SEQ_XY_RSP xy_rsp;
        SEQ_LIST_RSP list_rsp;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(GRAPH_REAL_RSP&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_GRAPH_REAL_RSP;

    //
    // IDL:ODB_CORBA/CODB_NET/ORDER_KEY_REQ:1.0
    //
    struct ORDER_KEY_REQ;
    typedef OB::FixVar< ORDER_KEY_REQ > ORDER_KEY_REQ_var;
    typedef ORDER_KEY_REQ& ORDER_KEY_REQ_out;

    struct ORDER_KEY_REQ
    {
        typedef ORDER_KEY_REQ_var _var_type;

        ::CORBA::Long order_no;
        ::CORBA::Long key_id;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(ORDER_KEY_REQ&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_ORDER_KEY_REQ;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_ORDER_KEY_REQ:1.0
    //
    class OBUnique_SEQ_ORDER_KEY_REQ { };

    typedef OB::FixSeq< ORDER_KEY_REQ, OBUnique_SEQ_ORDER_KEY_REQ > SEQ_ORDER_KEY_REQ;
    typedef OB::SeqVar< OB::FixSeq< ORDER_KEY_REQ, OBUnique_SEQ_ORDER_KEY_REQ > > SEQ_ORDER_KEY_REQ_var;
    typedef OB::SeqOut< OB::FixSeq< ORDER_KEY_REQ, OBUnique_SEQ_ORDER_KEY_REQ > > SEQ_ORDER_KEY_REQ_out;
    static OB::TypeCodeConst _tc_SEQ_ORDER_KEY_REQ;

    struct OBInfo_SEQ_ORDER_KEY_REQ : public OB::ConstructedInfo
    {
        OBInfo_SEQ_ORDER_KEY_REQ() { }

        virtual void free(void* p) const
        {
            delete (SEQ_ORDER_KEY_REQ*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_ORDER_KEY_REQ(*(const SEQ_ORDER_KEY_REQ*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/GRAPH_ORDER_KEY_REQ:1.0
    //
    struct GRAPH_ORDER_KEY_REQ;
    typedef OB::VarVar< GRAPH_ORDER_KEY_REQ > GRAPH_ORDER_KEY_REQ_var;
    typedef OB::VarOut< GRAPH_ORDER_KEY_REQ > GRAPH_ORDER_KEY_REQ_out;

    struct GRAPH_ORDER_KEY_REQ
    {
#ifdef OB_CLEAR_MEM
        GRAPH_ORDER_KEY_REQ();
#else
        GRAPH_ORDER_KEY_REQ() { }
#endif
        GRAPH_ORDER_KEY_REQ(const GRAPH_ORDER_KEY_REQ&);
        GRAPH_ORDER_KEY_REQ& operator=(const GRAPH_ORDER_KEY_REQ&);

        typedef GRAPH_ORDER_KEY_REQ_var _var_type;

        REQ_BASE base_info;
        ::CORBA::Long app_no;
        ::CORBA::Long graph_id;
        SEQ_ORDER_KEY_REQ seq_order_key;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(GRAPH_ORDER_KEY_REQ&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_GRAPH_ORDER_KEY_REQ;

    //
    // IDL:ODB_CORBA/CODB_NET/ORDER_KEY_RSP:1.0
    //
    struct ORDER_KEY_RSP;
    typedef OB::FixVar< ORDER_KEY_RSP > ORDER_KEY_RSP_var;
    typedef ORDER_KEY_RSP& ORDER_KEY_RSP_out;

    struct ORDER_KEY_RSP
    {
        typedef ORDER_KEY_RSP_var _var_type;

        ::CORBA::Long order_no;
        ::CORBA::Octet is_in_app;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(ORDER_KEY_RSP&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_ORDER_KEY_RSP;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_ORDER_KEY_RSP:1.0
    //
    class OBUnique_SEQ_ORDER_KEY_RSP { };

    typedef OB::FixSeq< ORDER_KEY_RSP, OBUnique_SEQ_ORDER_KEY_RSP > SEQ_ORDER_KEY_RSP;
    typedef OB::SeqVar< OB::FixSeq< ORDER_KEY_RSP, OBUnique_SEQ_ORDER_KEY_RSP > > SEQ_ORDER_KEY_RSP_var;
    typedef OB::SeqOut< OB::FixSeq< ORDER_KEY_RSP, OBUnique_SEQ_ORDER_KEY_RSP > > SEQ_ORDER_KEY_RSP_out;
    static OB::TypeCodeConst _tc_SEQ_ORDER_KEY_RSP;

    struct OBInfo_SEQ_ORDER_KEY_RSP : public OB::ConstructedInfo
    {
        OBInfo_SEQ_ORDER_KEY_RSP() { }

        virtual void free(void* p) const
        {
            delete (SEQ_ORDER_KEY_RSP*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_ORDER_KEY_RSP(*(const SEQ_ORDER_KEY_RSP*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/GRAPH_ORDER_KEY_RSP:1.0
    //
    struct GRAPH_ORDER_KEY_RSP;
    typedef OB::VarVar< GRAPH_ORDER_KEY_RSP > GRAPH_ORDER_KEY_RSP_var;
    typedef OB::VarOut< GRAPH_ORDER_KEY_RSP > GRAPH_ORDER_KEY_RSP_out;

    struct GRAPH_ORDER_KEY_RSP
    {
#ifdef OB_CLEAR_MEM
        GRAPH_ORDER_KEY_RSP();
#else
        GRAPH_ORDER_KEY_RSP() { }
#endif
        GRAPH_ORDER_KEY_RSP(const GRAPH_ORDER_KEY_RSP&);
        GRAPH_ORDER_KEY_RSP& operator=(const GRAPH_ORDER_KEY_RSP&);

        typedef GRAPH_ORDER_KEY_RSP_var _var_type;

        ::CORBA::Long graph_id;
        SEQ_ORDER_KEY_RSP seq_app;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(GRAPH_ORDER_KEY_RSP&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_GRAPH_ORDER_KEY_RSP;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_ENTITY:1.0
    //
    struct REQ_ENTITY;
    typedef OB::VarVar< REQ_ENTITY > REQ_ENTITY_var;
    typedef OB::VarOut< REQ_ENTITY > REQ_ENTITY_out;

    struct REQ_ENTITY
    {
#ifdef OB_CLEAR_MEM
        REQ_ENTITY();
#else
        REQ_ENTITY() { }
#endif
        REQ_ENTITY(const REQ_ENTITY&);
        REQ_ENTITY& operator=(const REQ_ENTITY&);

        typedef REQ_ENTITY_var _var_type;

        REQ_BASE base_info;
        OB::StrForStruct object_name;
        ::CORBA::Short object_id;
        ::CORBA::Octet object_mode;
        ::CORBA::Octet object_eng;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_ENTITY&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_ENTITY;

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_ENTITY:1.0
    //
    struct RSP_ENTITY;
    typedef OB::VarVar< RSP_ENTITY > RSP_ENTITY_var;
    typedef OB::VarOut< RSP_ENTITY > RSP_ENTITY_out;

    struct RSP_ENTITY
    {
#ifdef OB_CLEAR_MEM
        RSP_ENTITY();
#else
        RSP_ENTITY() { }
#endif
        RSP_ENTITY(const RSP_ENTITY&);
        RSP_ENTITY& operator=(const RSP_ENTITY&);

        typedef RSP_ENTITY_var _var_type;

        ::CORBA::Long object_no;
        OB::StrForStruct object_name;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_ENTITY&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_ENTITY;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_FAC:1.0
    //
    struct REQ_FAC;
    typedef OB::VarVar< REQ_FAC > REQ_FAC_var;
    typedef OB::VarOut< REQ_FAC > REQ_FAC_out;

    struct REQ_FAC
    {
#ifdef OB_CLEAR_MEM
        REQ_FAC();
#else
        REQ_FAC() { }
#endif
        REQ_FAC(const REQ_FAC&);
        REQ_FAC& operator=(const REQ_FAC&);

        typedef REQ_FAC_var _var_type;

        REQ_BASE base_info;
        ::CORBA::Long table_no;
        SEQ_CHAR seq_keyword;
        ::CORBA::Long keybuf_size;
        ::CORBA::Long fac_no;
        OB::StrForStruct fac_name;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_FAC&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_FAC;

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_FAC:1.0
    //
    struct RSP_FAC;
    typedef OB::VarVar< RSP_FAC > RSP_FAC_var;
    typedef OB::VarOut< RSP_FAC > RSP_FAC_out;

    struct RSP_FAC
    {
#ifdef OB_CLEAR_MEM
        RSP_FAC();
#else
        RSP_FAC() { }
#endif
        RSP_FAC(const RSP_FAC&);
        RSP_FAC& operator=(const RSP_FAC&);

        typedef RSP_FAC_var _var_type;

        ::CORBA::Long fac_no;
        OB::StrForStruct fac_name;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_FAC&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_FAC;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_VAL_STA:1.0
    //
    struct REQ_VAL_STA;
    typedef OB::VarVar< REQ_VAL_STA > REQ_VAL_STA_var;
    typedef OB::VarOut< REQ_VAL_STA > REQ_VAL_STA_out;

    struct REQ_VAL_STA
    {
#ifdef OB_CLEAR_MEM
        REQ_VAL_STA();
#else
        REQ_VAL_STA() { }
#endif
        REQ_VAL_STA(const REQ_VAL_STA&);
        REQ_VAL_STA& operator=(const REQ_VAL_STA&);

        typedef REQ_VAL_STA_var _var_type;

        ::CORBA::Short req_type;
        REQ_BASE base_info;
        SEQ_KEY_ID keyid_stru_seq;
        SEQ_KEY_ID_STA keyid_sta_stru_seq;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_VAL_STA&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_VAL_STA;

    //
    // IDL:ODB_CORBA/CODB_NET/TIntValueStatus:1.0
    //
    struct TIntValueStatus;
    typedef OB::FixVar< TIntValueStatus > TIntValueStatus_var;
    typedef TIntValueStatus& TIntValueStatus_out;

    struct TIntValueStatus
    {
        typedef TIntValueStatus_var _var_type;

        ::CORBA::Long value;
        ::CORBA::Long status;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(TIntValueStatus&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_TIntValueStatus;

    //
    // IDL:ODB_CORBA/CODB_NET/TFloatValueStatus:1.0
    //
    struct TFloatValueStatus;
    typedef OB::FixVar< TFloatValueStatus > TFloatValueStatus_var;
    typedef TFloatValueStatus& TFloatValueStatus_out;

    struct TFloatValueStatus
    {
        typedef TFloatValueStatus_var _var_type;

        ::CORBA::Float value;
        ::CORBA::Long status;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(TFloatValueStatus&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_TFloatValueStatus;

    //
    // IDL:ODB_CORBA/CODB_NET/TCharValueStatus:1.0
    //
    struct TCharValueStatus;
    typedef OB::FixVar< TCharValueStatus > TCharValueStatus_var;
    typedef TCharValueStatus& TCharValueStatus_out;

    struct TCharValueStatus
    {
        typedef TCharValueStatus_var _var_type;

        ::CORBA::Octet value;
        ::CORBA::Long status;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(TCharValueStatus&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_TCharValueStatus;

    //
    // IDL:ODB_CORBA/CODB_NET/TUnionValueStatus:1.0
    //
    struct TUnionValueStatus;
    typedef OB::VarVar< TUnionValueStatus > TUnionValueStatus_var;
    typedef OB::VarOut< TUnionValueStatus > TUnionValueStatus_out;

    struct TUnionValueStatus
    {
#ifdef OB_CLEAR_MEM
        TUnionValueStatus();
#else
        TUnionValueStatus() { }
#endif
        TUnionValueStatus(const TUnionValueStatus&);
        TUnionValueStatus& operator=(const TUnionValueStatus&);

        typedef TUnionValueStatus_var _var_type;

        union_data_type value;
        ::CORBA::Long status;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(TUnionValueStatus&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_TUnionValueStatus;

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_INT_VAL_STA:1.0
    //
    class OBUnique_SEQ_INT_VAL_STA { };

    typedef OB::FixSeq< TIntValueStatus, OBUnique_SEQ_INT_VAL_STA > SEQ_INT_VAL_STA;
    typedef OB::SeqVar< OB::FixSeq< TIntValueStatus, OBUnique_SEQ_INT_VAL_STA > > SEQ_INT_VAL_STA_var;
    typedef OB::SeqOut< OB::FixSeq< TIntValueStatus, OBUnique_SEQ_INT_VAL_STA > > SEQ_INT_VAL_STA_out;
    static OB::TypeCodeConst _tc_SEQ_INT_VAL_STA;

    struct OBInfo_SEQ_INT_VAL_STA : public OB::ConstructedInfo
    {
        OBInfo_SEQ_INT_VAL_STA() { }

        virtual void free(void* p) const
        {
            delete (SEQ_INT_VAL_STA*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_INT_VAL_STA(*(const SEQ_INT_VAL_STA*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_FLOAT_VAL_STA:1.0
    //
    class OBUnique_SEQ_FLOAT_VAL_STA { };

    typedef OB::FixSeq< TFloatValueStatus, OBUnique_SEQ_FLOAT_VAL_STA > SEQ_FLOAT_VAL_STA;
    typedef OB::SeqVar< OB::FixSeq< TFloatValueStatus, OBUnique_SEQ_FLOAT_VAL_STA > > SEQ_FLOAT_VAL_STA_var;
    typedef OB::SeqOut< OB::FixSeq< TFloatValueStatus, OBUnique_SEQ_FLOAT_VAL_STA > > SEQ_FLOAT_VAL_STA_out;
    static OB::TypeCodeConst _tc_SEQ_FLOAT_VAL_STA;

    struct OBInfo_SEQ_FLOAT_VAL_STA : public OB::ConstructedInfo
    {
        OBInfo_SEQ_FLOAT_VAL_STA() { }

        virtual void free(void* p) const
        {
            delete (SEQ_FLOAT_VAL_STA*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_FLOAT_VAL_STA(*(const SEQ_FLOAT_VAL_STA*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_CHAR_VAL_STA:1.0
    //
    class OBUnique_SEQ_CHAR_VAL_STA { };

    typedef OB::FixSeq< TCharValueStatus, OBUnique_SEQ_CHAR_VAL_STA > SEQ_CHAR_VAL_STA;
    typedef OB::SeqVar< OB::FixSeq< TCharValueStatus, OBUnique_SEQ_CHAR_VAL_STA > > SEQ_CHAR_VAL_STA_var;
    typedef OB::SeqOut< OB::FixSeq< TCharValueStatus, OBUnique_SEQ_CHAR_VAL_STA > > SEQ_CHAR_VAL_STA_out;
    static OB::TypeCodeConst _tc_SEQ_CHAR_VAL_STA;

    struct OBInfo_SEQ_CHAR_VAL_STA : public OB::ConstructedInfo
    {
        OBInfo_SEQ_CHAR_VAL_STA() { }

        virtual void free(void* p) const
        {
            delete (SEQ_CHAR_VAL_STA*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_CHAR_VAL_STA(*(const SEQ_CHAR_VAL_STA*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/SEQ_UNION_VAL_STA:1.0
    //
    class OBUnique_SEQ_UNION_VAL_STA { };

    typedef OB::VarSeq< TUnionValueStatus, OBUnique_SEQ_UNION_VAL_STA > SEQ_UNION_VAL_STA;
    typedef OB::SeqVar< OB::VarSeq< TUnionValueStatus, OBUnique_SEQ_UNION_VAL_STA > > SEQ_UNION_VAL_STA_var;
    typedef OB::SeqOut< OB::VarSeq< TUnionValueStatus, OBUnique_SEQ_UNION_VAL_STA > > SEQ_UNION_VAL_STA_out;
    static OB::TypeCodeConst _tc_SEQ_UNION_VAL_STA;

    struct OBInfo_SEQ_UNION_VAL_STA : public OB::ConstructedInfo
    {
        OBInfo_SEQ_UNION_VAL_STA() { }

        virtual void free(void* p) const
        {
            delete (SEQ_UNION_VAL_STA*)p;
        }

        virtual void* dup(const void* p) const
        {
            return new SEQ_UNION_VAL_STA(*(const SEQ_UNION_VAL_STA*)p);
        }

        virtual void marshal(const void*, OB::OutputStreamImpl*) const;
        virtual void unmarshal(void*, OB::InputStreamImpl*) const;
    };

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_INT_VAL_STA:1.0
    //
    struct RSP_INT_VAL_STA;
    typedef OB::VarVar< RSP_INT_VAL_STA > RSP_INT_VAL_STA_var;
    typedef OB::VarOut< RSP_INT_VAL_STA > RSP_INT_VAL_STA_out;

    struct RSP_INT_VAL_STA
    {
        RSP_INT_VAL_STA() { }
        RSP_INT_VAL_STA(const RSP_INT_VAL_STA&);
        RSP_INT_VAL_STA& operator=(const RSP_INT_VAL_STA&);

        typedef RSP_INT_VAL_STA_var _var_type;

        SEQ_INT_VAL_STA rsp_val_sta;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_INT_VAL_STA&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_INT_VAL_STA;

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_FLOAT_VAL_STA:1.0
    //
    struct RSP_FLOAT_VAL_STA;
    typedef OB::VarVar< RSP_FLOAT_VAL_STA > RSP_FLOAT_VAL_STA_var;
    typedef OB::VarOut< RSP_FLOAT_VAL_STA > RSP_FLOAT_VAL_STA_out;

    struct RSP_FLOAT_VAL_STA
    {
        RSP_FLOAT_VAL_STA() { }
        RSP_FLOAT_VAL_STA(const RSP_FLOAT_VAL_STA&);
        RSP_FLOAT_VAL_STA& operator=(const RSP_FLOAT_VAL_STA&);

        typedef RSP_FLOAT_VAL_STA_var _var_type;

        SEQ_FLOAT_VAL_STA rsp_val_sta;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_FLOAT_VAL_STA&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_FLOAT_VAL_STA;

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_CHAR_VAL_STA:1.0
    //
    struct RSP_CHAR_VAL_STA;
    typedef OB::VarVar< RSP_CHAR_VAL_STA > RSP_CHAR_VAL_STA_var;
    typedef OB::VarOut< RSP_CHAR_VAL_STA > RSP_CHAR_VAL_STA_out;

    struct RSP_CHAR_VAL_STA
    {
        RSP_CHAR_VAL_STA() { }
        RSP_CHAR_VAL_STA(const RSP_CHAR_VAL_STA&);
        RSP_CHAR_VAL_STA& operator=(const RSP_CHAR_VAL_STA&);

        typedef RSP_CHAR_VAL_STA_var _var_type;

        SEQ_CHAR_VAL_STA rsp_val_sta;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_CHAR_VAL_STA&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_CHAR_VAL_STA;

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_UNION_VAL_STA:1.0
    //
    struct RSP_UNION_VAL_STA;
    typedef OB::VarVar< RSP_UNION_VAL_STA > RSP_UNION_VAL_STA_var;
    typedef OB::VarOut< RSP_UNION_VAL_STA > RSP_UNION_VAL_STA_out;

    struct RSP_UNION_VAL_STA
    {
        RSP_UNION_VAL_STA() { }
        RSP_UNION_VAL_STA(const RSP_UNION_VAL_STA&);
        RSP_UNION_VAL_STA& operator=(const RSP_UNION_VAL_STA&);

        typedef RSP_UNION_VAL_STA_var _var_type;

        SEQ_UNION_VAL_STA rsp_val_sta;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_UNION_VAL_STA&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_UNION_VAL_STA;

    //
    // IDL:ODB_CORBA/CODB_NET/REQ_CON:1.0
    //
    struct REQ_CON;
    typedef OB::VarVar< REQ_CON > REQ_CON_var;
    typedef OB::VarOut< REQ_CON > REQ_CON_out;

    struct REQ_CON
    {
#ifdef OB_CLEAR_MEM
        REQ_CON();
#else
        REQ_CON() { }
#endif
        REQ_CON(const REQ_CON&);
        REQ_CON& operator=(const REQ_CON&);

        typedef REQ_CON_var _var_type;

        REQ_BASE base_info;
        FIELD_STRU get_field_info;
        SEQ_CHAR con_field_value;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(REQ_CON&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_REQ_CON;

    //
    // IDL:ODB_CORBA/CODB_NET/RSP_CON:1.0
    //
    struct RSP_CON;
    typedef OB::VarVar< RSP_CON > RSP_CON_var;
    typedef OB::VarOut< RSP_CON > RSP_CON_out;

    struct RSP_CON
    {
#ifdef OB_CLEAR_MEM
        RSP_CON();
#else
        RSP_CON() { }
#endif
        RSP_CON(const RSP_CON&);
        RSP_CON& operator=(const RSP_CON&);

        typedef RSP_CON_var _var_type;

        ::CORBA::Long fit_num;
        ::CORBA::Long one_fit_size;
        SEQ_CHAR seq_data;
        ::CORBA::Long data_size;

        void _OB_marshal(OB::OutputStreamImpl*) const;
        static void _OB_unmarshal(RSP_CON&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_RSP_CON;

    //
    // IDL:ODB_CORBA/CODB_NET/TableCreate:1.0
    //
    virtual ::CORBA::Long TableCreate(const REQ_STDB_CREATE& req_create) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableDelete:1.0
    //
    virtual ::CORBA::Long TableDelete(const REQ_STDB_DELETE& req_delete) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableGet:1.0
    //
    virtual ::CORBA::Long TableGet(const REQ_READ& read_req,
                                   RSP_READ_out read_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableGetByName:1.0
    //
    virtual ::CORBA::Long TableGetByName(const REQ_READ& read_req,
                                         RSP_READ_out read_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableWrite:1.0
    //
    virtual ::CORBA::Long TableWrite(const REQ_KEY_WRITE& write_req) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableModify:1.0
    //
    virtual ::CORBA::Long TableModify(const REQ_MODIFY& modify_req) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableUpdate:1.0
    //
    virtual ::CORBA::Long TableUpdate(const REQ_UPDATE& update_req) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/DeleteRecord:1.0
    //
    virtual ::CORBA::Long DeleteRecord(const REQ_KEY_ERASE& delete_req) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableClear:1.0
    //
    virtual ::CORBA::Long TableClear(const REQ_TABLE_CLEAR& clear_req) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetTablePara:1.0
    //
    virtual ::CORBA::Long GetTablePara(const REQ_PARAMETER& para_req,
                                       RSP_PARAMETER_out para_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetTableParameter:1.0
    //
    virtual ::CORBA::Long GetTableParameter(const REQ_PARAMETER& para_req,
                                            RSP_READ_out para_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetAppTableParameter:1.0
    //
    virtual ::CORBA::Long GetAppTableParameter(const REQ_APP_PARAMETER& para_req,
                                               RSP_APP_PARAMETER_out para_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFieldPara:1.0
    //
    virtual ::CORBA::Long GetFieldPara(const REQ_FIELD_BASE_INFO& para_req,
                                       RSP_FIELD_BASE_INFO_out para_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetKeyInfo:1.0
    //
    virtual ::CORBA::Long GetKeyInfo(RSP_KEYINFO_out key_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableGetBySql:1.0
    //
    virtual ::CORBA::Long TableGetBySql(const REQ_SQL& select_req,
                                        RSP_READ_out select_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/MenuRead:1.0
    //
    virtual ::CORBA::Long MenuRead(const REQ_MENU& menu_req,
                                   RSP_MENU_out menu_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableReleMenuRead:1.0
    //
    virtual ::CORBA::Long TableReleMenuRead(const REQ_RELE_MENU& rele_req,
                                            RSP_RELE_MENU_out rele_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetNameStringByKeyID:1.0
    //
    virtual ::CORBA::Long GetNameStringByKeyID(const REQ_NAME_STRING& name_req,
                                               RSP_NAME_STRING_out name_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetRefMenuString:1.0
    //
    virtual ::CORBA::Long GetRefMenuString(const REQ_REF_MENU& ref_req,
                                           RSP_REF_MENU_out ref_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetNameStringByMultiKeyID:1.0
    //
    virtual ::CORBA::Long GetNameStringByMultiKeyID(const REQ_MULTI_NAME_STRING& name_req,
                                                    RSP_MULTI_NAME_STRING_out name_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GraphGetData:1.0
    //
    virtual ::CORBA::Long GraphGetData(const GRAPH_REAL_ODB_REQ& real_req,
                                       GRAPH_REAL_RSP_out real_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GraphGetAppInfo:1.0
    //
    virtual ::CORBA::Long GraphGetAppInfo(const GRAPH_ORDER_KEY_REQ& app_req,
                                          GRAPH_ORDER_KEY_RSP_out app_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/ExchangeNameNo:1.0
    //
    virtual ::CORBA::Long ExchangeNameNo(const REQ_ENTITY& object_req,
                                         RSP_ENTITY_out object_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNameByKeyNo:1.0
    //
    virtual ::CORBA::Long GetFacNameByKeyNo(const REQ_FAC& fac_req,
                                            RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNameByFacID:1.0
    //
    virtual ::CORBA::Long GetFacNameByFacID(const REQ_FAC& fac_req,
                                            RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNameByFacNo:1.0
    //
    virtual ::CORBA::Long GetFacNameByFacNo(const REQ_FAC& fac_req,
                                            RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacIDByFacName:1.0
    //
    virtual ::CORBA::Long GetFacIDByFacName(const REQ_FAC& fac_req,
                                            RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNoByFacName:1.0
    //
    virtual ::CORBA::Long GetFacNoByFacName(const REQ_FAC& fac_req,
                                            RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacIDByFacNo:1.0
    //
    virtual ::CORBA::Long GetFacIDByFacNo(const REQ_FAC& fac_req,
                                          RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNoByFacID:1.0
    //
    virtual ::CORBA::Long GetFacNoByFacID(const REQ_FAC& fac_req,
                                          RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetValueAndStatus:1.0
    //
    virtual ::CORBA::Long GetValueAndStatus(const REQ_VAL_STA& req_key_id,
                                            RSP_INT_VAL_STA_out rsp_int_val,
                                            RSP_FLOAT_VAL_STA_out rsp_float_val,
                                            RSP_CHAR_VAL_STA_out rsp_char_val,
                                            RSP_UNION_VAL_STA_out rsp_union_val) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/PingRtdbServer:1.0
    //
    virtual ::CORBA::Long PingRtdbServer(::CORBA::Long req_data,
                                         ::CORBA::Long_out rsp_data) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableGetByFieldValue:1.0
    //
    virtual ::CORBA::Long TableGetByFieldValue(const REQ_CON& read_req,
                                               RSP_CON_out read_rsp) = 0;
};

} // End of namespace ODB_CORBA

//
// IDL:ODB_CORBA:1.0
//
namespace OBProxy_ODB_CORBA
{

//
// IDL:ODB_CORBA/CODB_NET:1.0
//
class CODB_NET : virtual public ::ODB_CORBA::CODB_NET,
                 virtual public OBCORBA::Object
{
    CODB_NET(const CODB_NET&);
    void operator=(const CODB_NET&);

protected:

    virtual OB::MarshalStubImpl_ptr _OB_createMarshalStubImpl();

public:

    CODB_NET() { }
    virtual ~CODB_NET() { }

    virtual const char** _OB_ids() const;

    //
    // IDL:ODB_CORBA/CODB_NET/TableCreate:1.0
    //
    ::CORBA::Long TableCreate(const ::ODB_CORBA::CODB_NET::REQ_STDB_CREATE& req_create);

    //
    // IDL:ODB_CORBA/CODB_NET/TableDelete:1.0
    //
    ::CORBA::Long TableDelete(const ::ODB_CORBA::CODB_NET::REQ_STDB_DELETE& req_delete);

    //
    // IDL:ODB_CORBA/CODB_NET/TableGet:1.0
    //
    ::CORBA::Long TableGet(const ::ODB_CORBA::CODB_NET::REQ_READ& read_req,
                           ::ODB_CORBA::CODB_NET::RSP_READ_out read_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/TableGetByName:1.0
    //
    ::CORBA::Long TableGetByName(const ::ODB_CORBA::CODB_NET::REQ_READ& read_req,
                                 ::ODB_CORBA::CODB_NET::RSP_READ_out read_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/TableWrite:1.0
    //
    ::CORBA::Long TableWrite(const ::ODB_CORBA::CODB_NET::REQ_KEY_WRITE& write_req);

    //
    // IDL:ODB_CORBA/CODB_NET/TableModify:1.0
    //
    ::CORBA::Long TableModify(const ::ODB_CORBA::CODB_NET::REQ_MODIFY& modify_req);

    //
    // IDL:ODB_CORBA/CODB_NET/TableUpdate:1.0
    //
    ::CORBA::Long TableUpdate(const ::ODB_CORBA::CODB_NET::REQ_UPDATE& update_req);

    //
    // IDL:ODB_CORBA/CODB_NET/DeleteRecord:1.0
    //
    ::CORBA::Long DeleteRecord(const ::ODB_CORBA::CODB_NET::REQ_KEY_ERASE& delete_req);

    //
    // IDL:ODB_CORBA/CODB_NET/TableClear:1.0
    //
    ::CORBA::Long TableClear(const ::ODB_CORBA::CODB_NET::REQ_TABLE_CLEAR& clear_req);

    //
    // IDL:ODB_CORBA/CODB_NET/GetTablePara:1.0
    //
    ::CORBA::Long GetTablePara(const ::ODB_CORBA::CODB_NET::REQ_PARAMETER& para_req,
                               ::ODB_CORBA::CODB_NET::RSP_PARAMETER_out para_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetTableParameter:1.0
    //
    ::CORBA::Long GetTableParameter(const ::ODB_CORBA::CODB_NET::REQ_PARAMETER& para_req,
                                    ::ODB_CORBA::CODB_NET::RSP_READ_out para_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetAppTableParameter:1.0
    //
    ::CORBA::Long GetAppTableParameter(const ::ODB_CORBA::CODB_NET::REQ_APP_PARAMETER& para_req,
                                       ::ODB_CORBA::CODB_NET::RSP_APP_PARAMETER_out para_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFieldPara:1.0
    //
    ::CORBA::Long GetFieldPara(const ::ODB_CORBA::CODB_NET::REQ_FIELD_BASE_INFO& para_req,
                               ::ODB_CORBA::CODB_NET::RSP_FIELD_BASE_INFO_out para_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetKeyInfo:1.0
    //
    ::CORBA::Long GetKeyInfo(::ODB_CORBA::CODB_NET::RSP_KEYINFO_out key_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/TableGetBySql:1.0
    //
    ::CORBA::Long TableGetBySql(const ::ODB_CORBA::CODB_NET::REQ_SQL& select_req,
                                ::ODB_CORBA::CODB_NET::RSP_READ_out select_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/MenuRead:1.0
    //
    ::CORBA::Long MenuRead(const ::ODB_CORBA::CODB_NET::REQ_MENU& menu_req,
                           ::ODB_CORBA::CODB_NET::RSP_MENU_out menu_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/TableReleMenuRead:1.0
    //
    ::CORBA::Long TableReleMenuRead(const ::ODB_CORBA::CODB_NET::REQ_RELE_MENU& rele_req,
                                    ::ODB_CORBA::CODB_NET::RSP_RELE_MENU_out rele_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetNameStringByKeyID:1.0
    //
    ::CORBA::Long GetNameStringByKeyID(const ::ODB_CORBA::CODB_NET::REQ_NAME_STRING& name_req,
                                       ::ODB_CORBA::CODB_NET::RSP_NAME_STRING_out name_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetRefMenuString:1.0
    //
    ::CORBA::Long GetRefMenuString(const ::ODB_CORBA::CODB_NET::REQ_REF_MENU& ref_req,
                                   ::ODB_CORBA::CODB_NET::RSP_REF_MENU_out ref_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetNameStringByMultiKeyID:1.0
    //
    ::CORBA::Long GetNameStringByMultiKeyID(const ::ODB_CORBA::CODB_NET::REQ_MULTI_NAME_STRING& name_req,
                                            ::ODB_CORBA::CODB_NET::RSP_MULTI_NAME_STRING_out name_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GraphGetData:1.0
    //
    ::CORBA::Long GraphGetData(const ::ODB_CORBA::CODB_NET::GRAPH_REAL_ODB_REQ& real_req,
                               ::ODB_CORBA::CODB_NET::GRAPH_REAL_RSP_out real_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GraphGetAppInfo:1.0
    //
    ::CORBA::Long GraphGetAppInfo(const ::ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_REQ& app_req,
                                  ::ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_RSP_out app_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/ExchangeNameNo:1.0
    //
    ::CORBA::Long ExchangeNameNo(const ::ODB_CORBA::CODB_NET::REQ_ENTITY& object_req,
                                 ::ODB_CORBA::CODB_NET::RSP_ENTITY_out object_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNameByKeyNo:1.0
    //
    ::CORBA::Long GetFacNameByKeyNo(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                    ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNameByFacID:1.0
    //
    ::CORBA::Long GetFacNameByFacID(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                    ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNameByFacNo:1.0
    //
    ::CORBA::Long GetFacNameByFacNo(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                    ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacIDByFacName:1.0
    //
    ::CORBA::Long GetFacIDByFacName(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                    ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNoByFacName:1.0
    //
    ::CORBA::Long GetFacNoByFacName(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                    ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacIDByFacNo:1.0
    //
    ::CORBA::Long GetFacIDByFacNo(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                  ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNoByFacID:1.0
    //
    ::CORBA::Long GetFacNoByFacID(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                  ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetValueAndStatus:1.0
    //
    ::CORBA::Long GetValueAndStatus(const ::ODB_CORBA::CODB_NET::REQ_VAL_STA& req_key_id,
                                    ::ODB_CORBA::CODB_NET::RSP_INT_VAL_STA_out rsp_int_val,
                                    ::ODB_CORBA::CODB_NET::RSP_FLOAT_VAL_STA_out rsp_float_val,
                                    ::ODB_CORBA::CODB_NET::RSP_CHAR_VAL_STA_out rsp_char_val,
                                    ::ODB_CORBA::CODB_NET::RSP_UNION_VAL_STA_out rsp_union_val);

    //
    // IDL:ODB_CORBA/CODB_NET/PingRtdbServer:1.0
    //
    ::CORBA::Long PingRtdbServer(::CORBA::Long req_data,
                                 ::CORBA::Long_out rsp_data);

    //
    // IDL:ODB_CORBA/CODB_NET/TableGetByFieldValue:1.0
    //
    ::CORBA::Long TableGetByFieldValue(const ::ODB_CORBA::CODB_NET::REQ_CON& read_req,
                                       ::ODB_CORBA::CODB_NET::RSP_CON_out read_rsp);
};

} // End of namespace OBProxy_ODB_CORBA

//
// IDL:ODB_CORBA:1.0
//
namespace OBStubImpl_ODB_CORBA
{

//
// IDL:ODB_CORBA/CODB_NET:1.0
//
class CODB_NET : virtual public OB::StubImplBase
{
    CODB_NET(const CODB_NET&);
    void operator=(const CODB_NET&);

protected:

    CODB_NET() { }

public:

    static inline CODB_NET_ptr
    _duplicate(CODB_NET_ptr p)
    {
        if(p)
            p -> _OB_incRef();
        return p;
    }

    static inline CODB_NET_ptr
    _nil()
    {
        return 0;
    }

    //
    // IDL:ODB_CORBA/CODB_NET/TableCreate:1.0
    //
    virtual ::CORBA::Long TableCreate(const ::ODB_CORBA::CODB_NET::REQ_STDB_CREATE& req_create) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableDelete:1.0
    //
    virtual ::CORBA::Long TableDelete(const ::ODB_CORBA::CODB_NET::REQ_STDB_DELETE& req_delete) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableGet:1.0
    //
    virtual ::CORBA::Long TableGet(const ::ODB_CORBA::CODB_NET::REQ_READ& read_req,
                                   ::ODB_CORBA::CODB_NET::RSP_READ_out read_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableGetByName:1.0
    //
    virtual ::CORBA::Long TableGetByName(const ::ODB_CORBA::CODB_NET::REQ_READ& read_req,
                                         ::ODB_CORBA::CODB_NET::RSP_READ_out read_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableWrite:1.0
    //
    virtual ::CORBA::Long TableWrite(const ::ODB_CORBA::CODB_NET::REQ_KEY_WRITE& write_req) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableModify:1.0
    //
    virtual ::CORBA::Long TableModify(const ::ODB_CORBA::CODB_NET::REQ_MODIFY& modify_req) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableUpdate:1.0
    //
    virtual ::CORBA::Long TableUpdate(const ::ODB_CORBA::CODB_NET::REQ_UPDATE& update_req) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/DeleteRecord:1.0
    //
    virtual ::CORBA::Long DeleteRecord(const ::ODB_CORBA::CODB_NET::REQ_KEY_ERASE& delete_req) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableClear:1.0
    //
    virtual ::CORBA::Long TableClear(const ::ODB_CORBA::CODB_NET::REQ_TABLE_CLEAR& clear_req) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetTablePara:1.0
    //
    virtual ::CORBA::Long GetTablePara(const ::ODB_CORBA::CODB_NET::REQ_PARAMETER& para_req,
                                       ::ODB_CORBA::CODB_NET::RSP_PARAMETER_out para_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetTableParameter:1.0
    //
    virtual ::CORBA::Long GetTableParameter(const ::ODB_CORBA::CODB_NET::REQ_PARAMETER& para_req,
                                            ::ODB_CORBA::CODB_NET::RSP_READ_out para_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetAppTableParameter:1.0
    //
    virtual ::CORBA::Long GetAppTableParameter(const ::ODB_CORBA::CODB_NET::REQ_APP_PARAMETER& para_req,
                                               ::ODB_CORBA::CODB_NET::RSP_APP_PARAMETER_out para_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFieldPara:1.0
    //
    virtual ::CORBA::Long GetFieldPara(const ::ODB_CORBA::CODB_NET::REQ_FIELD_BASE_INFO& para_req,
                                       ::ODB_CORBA::CODB_NET::RSP_FIELD_BASE_INFO_out para_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetKeyInfo:1.0
    //
    virtual ::CORBA::Long GetKeyInfo(::ODB_CORBA::CODB_NET::RSP_KEYINFO_out key_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableGetBySql:1.0
    //
    virtual ::CORBA::Long TableGetBySql(const ::ODB_CORBA::CODB_NET::REQ_SQL& select_req,
                                        ::ODB_CORBA::CODB_NET::RSP_READ_out select_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/MenuRead:1.0
    //
    virtual ::CORBA::Long MenuRead(const ::ODB_CORBA::CODB_NET::REQ_MENU& menu_req,
                                   ::ODB_CORBA::CODB_NET::RSP_MENU_out menu_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableReleMenuRead:1.0
    //
    virtual ::CORBA::Long TableReleMenuRead(const ::ODB_CORBA::CODB_NET::REQ_RELE_MENU& rele_req,
                                            ::ODB_CORBA::CODB_NET::RSP_RELE_MENU_out rele_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetNameStringByKeyID:1.0
    //
    virtual ::CORBA::Long GetNameStringByKeyID(const ::ODB_CORBA::CODB_NET::REQ_NAME_STRING& name_req,
                                               ::ODB_CORBA::CODB_NET::RSP_NAME_STRING_out name_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetRefMenuString:1.0
    //
    virtual ::CORBA::Long GetRefMenuString(const ::ODB_CORBA::CODB_NET::REQ_REF_MENU& ref_req,
                                           ::ODB_CORBA::CODB_NET::RSP_REF_MENU_out ref_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetNameStringByMultiKeyID:1.0
    //
    virtual ::CORBA::Long GetNameStringByMultiKeyID(const ::ODB_CORBA::CODB_NET::REQ_MULTI_NAME_STRING& name_req,
                                                    ::ODB_CORBA::CODB_NET::RSP_MULTI_NAME_STRING_out name_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GraphGetData:1.0
    //
    virtual ::CORBA::Long GraphGetData(const ::ODB_CORBA::CODB_NET::GRAPH_REAL_ODB_REQ& real_req,
                                       ::ODB_CORBA::CODB_NET::GRAPH_REAL_RSP_out real_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GraphGetAppInfo:1.0
    //
    virtual ::CORBA::Long GraphGetAppInfo(const ::ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_REQ& app_req,
                                          ::ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_RSP_out app_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/ExchangeNameNo:1.0
    //
    virtual ::CORBA::Long ExchangeNameNo(const ::ODB_CORBA::CODB_NET::REQ_ENTITY& object_req,
                                         ::ODB_CORBA::CODB_NET::RSP_ENTITY_out object_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNameByKeyNo:1.0
    //
    virtual ::CORBA::Long GetFacNameByKeyNo(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                            ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNameByFacID:1.0
    //
    virtual ::CORBA::Long GetFacNameByFacID(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                            ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNameByFacNo:1.0
    //
    virtual ::CORBA::Long GetFacNameByFacNo(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                            ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacIDByFacName:1.0
    //
    virtual ::CORBA::Long GetFacIDByFacName(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                            ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNoByFacName:1.0
    //
    virtual ::CORBA::Long GetFacNoByFacName(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                            ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacIDByFacNo:1.0
    //
    virtual ::CORBA::Long GetFacIDByFacNo(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                          ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNoByFacID:1.0
    //
    virtual ::CORBA::Long GetFacNoByFacID(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                          ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/GetValueAndStatus:1.0
    //
    virtual ::CORBA::Long GetValueAndStatus(const ::ODB_CORBA::CODB_NET::REQ_VAL_STA& req_key_id,
                                            ::ODB_CORBA::CODB_NET::RSP_INT_VAL_STA_out rsp_int_val,
                                            ::ODB_CORBA::CODB_NET::RSP_FLOAT_VAL_STA_out rsp_float_val,
                                            ::ODB_CORBA::CODB_NET::RSP_CHAR_VAL_STA_out rsp_char_val,
                                            ::ODB_CORBA::CODB_NET::RSP_UNION_VAL_STA_out rsp_union_val) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/PingRtdbServer:1.0
    //
    virtual ::CORBA::Long PingRtdbServer(::CORBA::Long req_data,
                                         ::CORBA::Long_out rsp_data) = 0;

    //
    // IDL:ODB_CORBA/CODB_NET/TableGetByFieldValue:1.0
    //
    virtual ::CORBA::Long TableGetByFieldValue(const ::ODB_CORBA::CODB_NET::REQ_CON& read_req,
                                               ::ODB_CORBA::CODB_NET::RSP_CON_out read_rsp) = 0;
};

} // End of namespace OBStubImpl_ODB_CORBA

//
// IDL:ODB_CORBA:1.0
//
namespace OBMarshalStubImpl_ODB_CORBA
{

//
// IDL:ODB_CORBA/CODB_NET:1.0
//
class CODB_NET : virtual public OBStubImpl_ODB_CORBA::CODB_NET,
                 virtual public OB::MarshalStubImpl
{
    CODB_NET(const CODB_NET&);
    void operator=(const CODB_NET&);

protected:

    CODB_NET() { }
    friend class OBProxy_ODB_CORBA::CODB_NET;

public:

    //
    // IDL:ODB_CORBA/CODB_NET/TableCreate:1.0
    //
    virtual ::CORBA::Long TableCreate(const ::ODB_CORBA::CODB_NET::REQ_STDB_CREATE& req_create);

    //
    // IDL:ODB_CORBA/CODB_NET/TableDelete:1.0
    //
    virtual ::CORBA::Long TableDelete(const ::ODB_CORBA::CODB_NET::REQ_STDB_DELETE& req_delete);

    //
    // IDL:ODB_CORBA/CODB_NET/TableGet:1.0
    //
    virtual ::CORBA::Long TableGet(const ::ODB_CORBA::CODB_NET::REQ_READ& read_req,
                                   ::ODB_CORBA::CODB_NET::RSP_READ_out read_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/TableGetByName:1.0
    //
    virtual ::CORBA::Long TableGetByName(const ::ODB_CORBA::CODB_NET::REQ_READ& read_req,
                                         ::ODB_CORBA::CODB_NET::RSP_READ_out read_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/TableWrite:1.0
    //
    virtual ::CORBA::Long TableWrite(const ::ODB_CORBA::CODB_NET::REQ_KEY_WRITE& write_req);

    //
    // IDL:ODB_CORBA/CODB_NET/TableModify:1.0
    //
    virtual ::CORBA::Long TableModify(const ::ODB_CORBA::CODB_NET::REQ_MODIFY& modify_req);

    //
    // IDL:ODB_CORBA/CODB_NET/TableUpdate:1.0
    //
    virtual ::CORBA::Long TableUpdate(const ::ODB_CORBA::CODB_NET::REQ_UPDATE& update_req);

    //
    // IDL:ODB_CORBA/CODB_NET/DeleteRecord:1.0
    //
    virtual ::CORBA::Long DeleteRecord(const ::ODB_CORBA::CODB_NET::REQ_KEY_ERASE& delete_req);

    //
    // IDL:ODB_CORBA/CODB_NET/TableClear:1.0
    //
    virtual ::CORBA::Long TableClear(const ::ODB_CORBA::CODB_NET::REQ_TABLE_CLEAR& clear_req);

    //
    // IDL:ODB_CORBA/CODB_NET/GetTablePara:1.0
    //
    virtual ::CORBA::Long GetTablePara(const ::ODB_CORBA::CODB_NET::REQ_PARAMETER& para_req,
                                       ::ODB_CORBA::CODB_NET::RSP_PARAMETER_out para_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetTableParameter:1.0
    //
    virtual ::CORBA::Long GetTableParameter(const ::ODB_CORBA::CODB_NET::REQ_PARAMETER& para_req,
                                            ::ODB_CORBA::CODB_NET::RSP_READ_out para_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetAppTableParameter:1.0
    //
    virtual ::CORBA::Long GetAppTableParameter(const ::ODB_CORBA::CODB_NET::REQ_APP_PARAMETER& para_req,
                                               ::ODB_CORBA::CODB_NET::RSP_APP_PARAMETER_out para_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFieldPara:1.0
    //
    virtual ::CORBA::Long GetFieldPara(const ::ODB_CORBA::CODB_NET::REQ_FIELD_BASE_INFO& para_req,
                                       ::ODB_CORBA::CODB_NET::RSP_FIELD_BASE_INFO_out para_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetKeyInfo:1.0
    //
    virtual ::CORBA::Long GetKeyInfo(::ODB_CORBA::CODB_NET::RSP_KEYINFO_out key_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/TableGetBySql:1.0
    //
    virtual ::CORBA::Long TableGetBySql(const ::ODB_CORBA::CODB_NET::REQ_SQL& select_req,
                                        ::ODB_CORBA::CODB_NET::RSP_READ_out select_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/MenuRead:1.0
    //
    virtual ::CORBA::Long MenuRead(const ::ODB_CORBA::CODB_NET::REQ_MENU& menu_req,
                                   ::ODB_CORBA::CODB_NET::RSP_MENU_out menu_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/TableReleMenuRead:1.0
    //
    virtual ::CORBA::Long TableReleMenuRead(const ::ODB_CORBA::CODB_NET::REQ_RELE_MENU& rele_req,
                                            ::ODB_CORBA::CODB_NET::RSP_RELE_MENU_out rele_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetNameStringByKeyID:1.0
    //
    virtual ::CORBA::Long GetNameStringByKeyID(const ::ODB_CORBA::CODB_NET::REQ_NAME_STRING& name_req,
                                               ::ODB_CORBA::CODB_NET::RSP_NAME_STRING_out name_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetRefMenuString:1.0
    //
    virtual ::CORBA::Long GetRefMenuString(const ::ODB_CORBA::CODB_NET::REQ_REF_MENU& ref_req,
                                           ::ODB_CORBA::CODB_NET::RSP_REF_MENU_out ref_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetNameStringByMultiKeyID:1.0
    //
    virtual ::CORBA::Long GetNameStringByMultiKeyID(const ::ODB_CORBA::CODB_NET::REQ_MULTI_NAME_STRING& name_req,
                                                    ::ODB_CORBA::CODB_NET::RSP_MULTI_NAME_STRING_out name_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GraphGetData:1.0
    //
    virtual ::CORBA::Long GraphGetData(const ::ODB_CORBA::CODB_NET::GRAPH_REAL_ODB_REQ& real_req,
                                       ::ODB_CORBA::CODB_NET::GRAPH_REAL_RSP_out real_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GraphGetAppInfo:1.0
    //
    virtual ::CORBA::Long GraphGetAppInfo(const ::ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_REQ& app_req,
                                          ::ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_RSP_out app_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/ExchangeNameNo:1.0
    //
    virtual ::CORBA::Long ExchangeNameNo(const ::ODB_CORBA::CODB_NET::REQ_ENTITY& object_req,
                                         ::ODB_CORBA::CODB_NET::RSP_ENTITY_out object_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNameByKeyNo:1.0
    //
    virtual ::CORBA::Long GetFacNameByKeyNo(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                            ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNameByFacID:1.0
    //
    virtual ::CORBA::Long GetFacNameByFacID(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                            ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNameByFacNo:1.0
    //
    virtual ::CORBA::Long GetFacNameByFacNo(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                            ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacIDByFacName:1.0
    //
    virtual ::CORBA::Long GetFacIDByFacName(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                            ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNoByFacName:1.0
    //
    virtual ::CORBA::Long GetFacNoByFacName(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                            ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacIDByFacNo:1.0
    //
    virtual ::CORBA::Long GetFacIDByFacNo(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                          ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetFacNoByFacID:1.0
    //
    virtual ::CORBA::Long GetFacNoByFacID(const ::ODB_CORBA::CODB_NET::REQ_FAC& fac_req,
                                          ::ODB_CORBA::CODB_NET::RSP_FAC_out fac_rsp);

    //
    // IDL:ODB_CORBA/CODB_NET/GetValueAndStatus:1.0
    //
    virtual ::CORBA::Long GetValueAndStatus(const ::ODB_CORBA::CODB_NET::REQ_VAL_STA& req_key_id,
                                            ::ODB_CORBA::CODB_NET::RSP_INT_VAL_STA_out rsp_int_val,
                                            ::ODB_CORBA::CODB_NET::RSP_FLOAT_VAL_STA_out rsp_float_val,
                                            ::ODB_CORBA::CODB_NET::RSP_CHAR_VAL_STA_out rsp_char_val,
                                            ::ODB_CORBA::CODB_NET::RSP_UNION_VAL_STA_out rsp_union_val);

    //
    // IDL:ODB_CORBA/CODB_NET/PingRtdbServer:1.0
    //
    virtual ::CORBA::Long PingRtdbServer(::CORBA::Long req_data,
                                         ::CORBA::Long_out rsp_data);

    //
    // IDL:ODB_CORBA/CODB_NET/TableGetByFieldValue:1.0
    //
    virtual ::CORBA::Long TableGetByFieldValue(const ::ODB_CORBA::CODB_NET::REQ_CON& read_req,
                                               ::ODB_CORBA::CODB_NET::RSP_CON_out read_rsp);
};

} // End of namespace OBMarshalStubImpl_ODB_CORBA

//
// IDL:ODB_CORBA:1.0
//
namespace OBV_ODB_CORBA
{

} // End of namespace OBV_ODB_CORBA

//
// IDL:ODB_CORBA/CODB_NET:1.0
//
namespace CORBA
{

inline void
release(::ODB_CORBA::CODB_NET_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::ODB_CORBA::CODB_NET_ptr p)
{
    return p == 0;
}

inline void
release(OBStubImpl_ODB_CORBA::CODB_NET_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(OBStubImpl_ODB_CORBA::CODB_NET_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET_ptr*);
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET_ptr);
CORBA::Boolean operator>>=(const ::CORBA::Any&, ODB_CORBA::CODB_NET_ptr&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, ODB_CORBA::CODB_NET_ptr& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_STRING:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_STRING*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_STRING&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_STRING*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_STRING* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_STRING& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_STRING*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_CHAR:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_CHAR*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_CHAR&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_CHAR*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_CHAR* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_CHAR& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_CHAR*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_FLOAT:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_FLOAT*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_FLOAT&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_FLOAT*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_FLOAT* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_FLOAT& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_FLOAT*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_LONG:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_LONG*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_LONG&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_LONG*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_LONG* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_LONG& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_LONG*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/KEYID_STRUCT:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::KEYID_STRUCT*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::KEYID_STRUCT&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::KEYID_STRUCT*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::KEYID_STRUCT* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::KEYID_STRUCT& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::KEYID_STRUCT*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/APPKEY_STRUCT:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::APPKEY_STRUCT*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::APPKEY_STRUCT&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::APPKEY_STRUCT*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::APPKEY_STRUCT* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::APPKEY_STRUCT& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::APPKEY_STRUCT*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/APPID_STRUCT:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::APPID_STRUCT*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::APPID_STRUCT&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::APPID_STRUCT*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::APPID_STRUCT* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::APPID_STRUCT& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::APPID_STRUCT*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/KEYID_STATUS_STRUCT:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::KEYID_STATUS_STRUCT*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::KEYID_STATUS_STRUCT&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::KEYID_STATUS_STRUCT*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::KEYID_STATUS_STRUCT* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::KEYID_STATUS_STRUCT& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::KEYID_STATUS_STRUCT*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_KEY_ID:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_KEY_ID*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_KEY_ID&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_KEY_ID*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_KEY_ID* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_KEY_ID& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_KEY_ID*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_APPKEY_ID:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_APPKEY_ID*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_APPKEY_ID&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_APPKEY_ID*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_APPKEY_ID* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_APPKEY_ID& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_APPKEY_ID*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_APP_ID:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_APP_ID*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_APP_ID&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_APP_ID*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_APP_ID* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_APP_ID& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_APP_ID*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_KEY_ID_STA:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_KEY_ID_STA*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_KEY_ID_STA&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_KEY_ID_STA*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_KEY_ID_STA* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_KEY_ID_STA& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_KEY_ID_STA*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/union_data_type:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::union_data_type*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::union_data_type&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::union_data_type*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::union_data_type* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::union_data_type& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::union_data_type*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_COMMON_DATA:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_COMMON_DATA*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_COMMON_DATA&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_COMMON_DATA*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_COMMON_DATA* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_COMMON_DATA& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_COMMON_DATA*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/TABLE_STRU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::TABLE_STRU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::TABLE_STRU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::TABLE_STRU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::TABLE_STRU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TABLE_STRU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TABLE_STRU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/COLUMN_STRU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::COLUMN_STRU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::COLUMN_STRU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::COLUMN_STRU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::COLUMN_STRU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::COLUMN_STRU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::COLUMN_STRU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_COLUMN_INFO:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_COLUMN_INFO*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_COLUMN_INFO&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_COLUMN_INFO*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_COLUMN_INFO* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_COLUMN_INFO& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_COLUMN_INFO*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_STDB_CREATE:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_STDB_CREATE*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_STDB_CREATE&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_STDB_CREATE*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_STDB_CREATE* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_STDB_CREATE& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_STDB_CREATE*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_STDB_DELETE:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_STDB_DELETE*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_STDB_DELETE&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_STDB_DELETE*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_STDB_DELETE* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_STDB_DELETE& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_STDB_DELETE*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/TABLE_PARAMETER:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::TABLE_PARAMETER*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::TABLE_PARAMETER&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::TABLE_PARAMETER*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::TABLE_PARAMETER* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TABLE_PARAMETER& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TABLE_PARAMETER*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/FIELD_PARAMETER:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::FIELD_PARAMETER*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::FIELD_PARAMETER&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::FIELD_PARAMETER*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::FIELD_PARAMETER* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::FIELD_PARAMETER& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::FIELD_PARAMETER*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/FIELD_BASE_INFO:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::FIELD_BASE_INFO*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::FIELD_BASE_INFO&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::FIELD_BASE_INFO*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::FIELD_BASE_INFO* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::FIELD_BASE_INFO& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::FIELD_BASE_INFO*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_FIELD_BASE_INFO:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_FIELD_BASE_INFO*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_FIELD_BASE_INFO&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_FIELD_BASE_INFO*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_FIELD_BASE_INFO* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_FIELD_BASE_INFO& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_FIELD_BASE_INFO*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/FIELD_STRU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::FIELD_STRU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::FIELD_STRU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::FIELD_STRU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::FIELD_STRU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::FIELD_STRU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::FIELD_STRU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_FIELD_STRU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_FIELD_STRU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_FIELD_STRU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_FIELD_STRU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_FIELD_STRU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_FIELD_STRU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_FIELD_STRU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_BASE:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_BASE*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_BASE&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_BASE*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_BASE* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_BASE& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_BASE*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_READ:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_READ*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_READ&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_READ*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_READ* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_READ& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_READ*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_READ:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_READ*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_READ&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_READ*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_READ* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_READ& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_READ*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_KEY_WRITE:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_KEY_WRITE*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_KEY_WRITE&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_KEY_WRITE*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_KEY_WRITE* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_KEY_WRITE& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_KEY_WRITE*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_MODIFY:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_MODIFY*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_MODIFY&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_MODIFY*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_MODIFY* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_MODIFY& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_MODIFY*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_UPDATE:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_UPDATE*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_UPDATE&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_UPDATE*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_UPDATE* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_UPDATE& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_UPDATE*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_KEY_ERASE:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_KEY_ERASE*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_KEY_ERASE&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_KEY_ERASE*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_KEY_ERASE* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_KEY_ERASE& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_KEY_ERASE*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_TABLE_CLEAR:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_TABLE_CLEAR*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_TABLE_CLEAR&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_TABLE_CLEAR*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_TABLE_CLEAR* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_TABLE_CLEAR& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_TABLE_CLEAR*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_FIELD_BASE_INFO:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_FIELD_BASE_INFO*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_FIELD_BASE_INFO&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_FIELD_BASE_INFO*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_FIELD_BASE_INFO* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_FIELD_BASE_INFO& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_FIELD_BASE_INFO*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_FIELD_BASE_INFO:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_FIELD_BASE_INFO*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_FIELD_BASE_INFO&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_FIELD_BASE_INFO*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_FIELD_BASE_INFO* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_FIELD_BASE_INFO& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_FIELD_BASE_INFO*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_PARAMETER:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_PARAMETER*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_PARAMETER&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_PARAMETER*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_PARAMETER* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_PARAMETER& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_PARAMETER*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_FIELD_PARAMETER:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_FIELD_PARAMETER*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_FIELD_PARAMETER&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_FIELD_PARAMETER*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_FIELD_PARAMETER* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_FIELD_PARAMETER& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_FIELD_PARAMETER*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_PARAMETER:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_PARAMETER*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_PARAMETER&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_PARAMETER*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_PARAMETER* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_PARAMETER& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_PARAMETER*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_APP_PARAMETER:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_APP_PARAMETER*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_APP_PARAMETER&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_APP_PARAMETER*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_APP_PARAMETER* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_APP_PARAMETER& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_APP_PARAMETER*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_TABLE_PARAMETER:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_TABLE_PARAMETER*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_TABLE_PARAMETER&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_TABLE_PARAMETER*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_TABLE_PARAMETER* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_TABLE_PARAMETER& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_TABLE_PARAMETER*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_APP_PARAMETER:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_APP_PARAMETER*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_APP_PARAMETER&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_APP_PARAMETER*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_APP_PARAMETER* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_APP_PARAMETER& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_APP_PARAMETER*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/TABLE_KEYINFO:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::TABLE_KEYINFO*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::TABLE_KEYINFO&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::TABLE_KEYINFO*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::TABLE_KEYINFO* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TABLE_KEYINFO& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TABLE_KEYINFO*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_TABLE_KEYINFO:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_TABLE_KEYINFO*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_TABLE_KEYINFO&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_TABLE_KEYINFO*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_TABLE_KEYINFO* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_TABLE_KEYINFO& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_TABLE_KEYINFO*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_KEYINFO:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_KEYINFO*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_KEYINFO&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_KEYINFO*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_KEYINFO* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_KEYINFO& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_KEYINFO*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_SQL:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_SQL*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_SQL&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_SQL*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_SQL* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_SQL& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_SQL*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_MENU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_MENU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_MENU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_MENU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_MENU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_MENU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_MENU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/MENU_INFO_STRU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::MENU_INFO_STRU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::MENU_INFO_STRU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::MENU_INFO_STRU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::MENU_INFO_STRU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::MENU_INFO_STRU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::MENU_INFO_STRU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_MENU_INFO:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_MENU_INFO*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_MENU_INFO&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_MENU_INFO*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_MENU_INFO* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_MENU_INFO& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_MENU_INFO*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_MENU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_MENU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_MENU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_MENU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_MENU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_MENU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_MENU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_RELE_MENU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_RELE_MENU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_RELE_MENU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_RELE_MENU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_RELE_MENU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_RELE_MENU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_RELE_MENU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/MENU_RELEVANT_STRU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::MENU_RELEVANT_STRU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::MENU_RELEVANT_STRU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::MENU_RELEVANT_STRU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::MENU_RELEVANT_STRU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::MENU_RELEVANT_STRU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::MENU_RELEVANT_STRU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_MENU_RELEVANT:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_MENU_RELEVANT*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_MENU_RELEVANT&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_MENU_RELEVANT*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_MENU_RELEVANT* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_MENU_RELEVANT& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_MENU_RELEVANT*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_RELE_MENU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_RELE_MENU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_RELE_MENU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_RELE_MENU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_RELE_MENU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_RELE_MENU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_RELE_MENU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_NAME_STRING:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_NAME_STRING*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_NAME_STRING&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_NAME_STRING*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_NAME_STRING* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_NAME_STRING& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_NAME_STRING*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_NAME_STRING:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_NAME_STRING*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_NAME_STRING&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_NAME_STRING*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_NAME_STRING* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_NAME_STRING& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_NAME_STRING*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_MULTI_NAME_STRING:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_MULTI_NAME_STRING*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_MULTI_NAME_STRING&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_MULTI_NAME_STRING*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_MULTI_NAME_STRING* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_MULTI_NAME_STRING& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_MULTI_NAME_STRING*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_RSP_NAME_STRING:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_RSP_NAME_STRING*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_RSP_NAME_STRING&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_RSP_NAME_STRING*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_RSP_NAME_STRING* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_RSP_NAME_STRING& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_RSP_NAME_STRING*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_MULTI_NAME_STRING:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_MULTI_NAME_STRING*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_MULTI_NAME_STRING&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_MULTI_NAME_STRING*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_MULTI_NAME_STRING* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_MULTI_NAME_STRING& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_MULTI_NAME_STRING*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_REF_MENU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_REF_MENU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_REF_MENU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_REF_MENU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_REF_MENU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_REF_MENU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_REF_MENU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REF_MENU_STRING:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REF_MENU_STRING*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REF_MENU_STRING&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REF_MENU_STRING*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REF_MENU_STRING* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REF_MENU_STRING& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REF_MENU_STRING*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_REF_MENU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_REF_MENU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_REF_MENU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_REF_MENU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_REF_MENU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_REF_MENU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_REF_MENU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_REF_MENU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_REF_MENU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_REF_MENU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_REF_MENU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_REF_MENU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_REF_MENU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_REF_MENU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/GRAPH_SIMPLE_REQ:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::GRAPH_SIMPLE_REQ*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_SIMPLE_REQ&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_SIMPLE_REQ*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::GRAPH_SIMPLE_REQ* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_SIMPLE_REQ& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_SIMPLE_REQ*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/GRAPH_XY_REQ:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::GRAPH_XY_REQ*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_XY_REQ&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_XY_REQ*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::GRAPH_XY_REQ* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_XY_REQ& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_XY_REQ*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/GRAPH_FIELD_STRU:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::GRAPH_FIELD_STRU*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_FIELD_STRU&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_FIELD_STRU*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::GRAPH_FIELD_STRU* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_FIELD_STRU& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_FIELD_STRU*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_GRAPH_FIELD:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_GRAPH_FIELD*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_GRAPH_FIELD&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_GRAPH_FIELD*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_GRAPH_FIELD* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_GRAPH_FIELD& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_GRAPH_FIELD*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/GRAPH_LIST_REQ:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::GRAPH_LIST_REQ*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_LIST_REQ&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_LIST_REQ*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::GRAPH_LIST_REQ* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_LIST_REQ& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_LIST_REQ*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_SIMPLE_REQ:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_SIMPLE_REQ*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_SIMPLE_REQ&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_SIMPLE_REQ*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_SIMPLE_REQ* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_SIMPLE_REQ& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_SIMPLE_REQ*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_XY_REQ:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_XY_REQ*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_XY_REQ&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_XY_REQ*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_XY_REQ* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_XY_REQ& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_XY_REQ*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_LIST_REQ:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_LIST_REQ*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_LIST_REQ&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_LIST_REQ*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_LIST_REQ* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_LIST_REQ& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_LIST_REQ*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/GRAPH_REAL_REQ:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::GRAPH_REAL_REQ*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_REAL_REQ&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_REAL_REQ*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::GRAPH_REAL_REQ* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_REAL_REQ& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_REAL_REQ*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/GRAPH_REAL_ODB_REQ:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::GRAPH_REAL_ODB_REQ*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_REAL_ODB_REQ&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_REAL_ODB_REQ*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::GRAPH_REAL_ODB_REQ* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_REAL_ODB_REQ& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_REAL_ODB_REQ*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/GRAPH_SIMPLE_RSP:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::GRAPH_SIMPLE_RSP*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_SIMPLE_RSP&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_SIMPLE_RSP*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::GRAPH_SIMPLE_RSP* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_SIMPLE_RSP& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_SIMPLE_RSP*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/GRAPH_XY_RSP:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::GRAPH_XY_RSP*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_XY_RSP&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_XY_RSP*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::GRAPH_XY_RSP* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_XY_RSP& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_XY_RSP*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/ORDER_VALUE:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::ORDER_VALUE*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::ORDER_VALUE&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::ORDER_VALUE*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::ORDER_VALUE* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::ORDER_VALUE& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::ORDER_VALUE*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_ORDER_VALUE:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_ORDER_VALUE*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_ORDER_VALUE&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_ORDER_VALUE*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_ORDER_VALUE* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_ORDER_VALUE& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_ORDER_VALUE*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/GRAPH_LIST_RSP:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::GRAPH_LIST_RSP*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_LIST_RSP&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_LIST_RSP*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::GRAPH_LIST_RSP* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_LIST_RSP& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_LIST_RSP*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_SIMPLE_RSP:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_SIMPLE_RSP*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_SIMPLE_RSP&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_SIMPLE_RSP*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_SIMPLE_RSP* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_SIMPLE_RSP& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_SIMPLE_RSP*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_XY_RSP:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_XY_RSP*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_XY_RSP&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_XY_RSP*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_XY_RSP* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_XY_RSP& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_XY_RSP*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_LIST_RSP:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_LIST_RSP*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_LIST_RSP&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_LIST_RSP*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_LIST_RSP* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_LIST_RSP& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_LIST_RSP*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/GRAPH_REAL_RSP:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::GRAPH_REAL_RSP*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_REAL_RSP&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_REAL_RSP*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::GRAPH_REAL_RSP* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_REAL_RSP& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_REAL_RSP*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/ORDER_KEY_REQ:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::ORDER_KEY_REQ*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::ORDER_KEY_REQ&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::ORDER_KEY_REQ*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::ORDER_KEY_REQ* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::ORDER_KEY_REQ& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::ORDER_KEY_REQ*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_ORDER_KEY_REQ:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_ORDER_KEY_REQ*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_ORDER_KEY_REQ&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_ORDER_KEY_REQ*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_ORDER_KEY_REQ* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_ORDER_KEY_REQ& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_ORDER_KEY_REQ*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/GRAPH_ORDER_KEY_REQ:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_REQ*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_REQ&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_REQ*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_REQ* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_REQ& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_REQ*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/ORDER_KEY_RSP:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::ORDER_KEY_RSP*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::ORDER_KEY_RSP&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::ORDER_KEY_RSP*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::ORDER_KEY_RSP* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::ORDER_KEY_RSP& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::ORDER_KEY_RSP*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_ORDER_KEY_RSP:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_ORDER_KEY_RSP*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_ORDER_KEY_RSP&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_ORDER_KEY_RSP*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_ORDER_KEY_RSP* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_ORDER_KEY_RSP& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_ORDER_KEY_RSP*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/GRAPH_ORDER_KEY_RSP:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_RSP*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_RSP&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_RSP*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_RSP* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_RSP& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::GRAPH_ORDER_KEY_RSP*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_ENTITY:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_ENTITY*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_ENTITY&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_ENTITY*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_ENTITY* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_ENTITY& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_ENTITY*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_ENTITY:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_ENTITY*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_ENTITY&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_ENTITY*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_ENTITY* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_ENTITY& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_ENTITY*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_FAC:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_FAC*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_FAC&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_FAC*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_FAC* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_FAC& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_FAC*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_FAC:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_FAC*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_FAC&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_FAC*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_FAC* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_FAC& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_FAC*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_VAL_STA:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_VAL_STA*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_VAL_STA&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_VAL_STA*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_VAL_STA* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_VAL_STA& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_VAL_STA*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/TIntValueStatus:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::TIntValueStatus*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::TIntValueStatus&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::TIntValueStatus*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::TIntValueStatus* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TIntValueStatus& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TIntValueStatus*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/TFloatValueStatus:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::TFloatValueStatus*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::TFloatValueStatus&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::TFloatValueStatus*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::TFloatValueStatus* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TFloatValueStatus& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TFloatValueStatus*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/TCharValueStatus:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::TCharValueStatus*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::TCharValueStatus&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::TCharValueStatus*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::TCharValueStatus* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TCharValueStatus& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TCharValueStatus*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/TUnionValueStatus:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::TUnionValueStatus*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::TUnionValueStatus&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::TUnionValueStatus*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::TUnionValueStatus* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TUnionValueStatus& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::TUnionValueStatus*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_INT_VAL_STA:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_INT_VAL_STA*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_INT_VAL_STA&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_INT_VAL_STA*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_INT_VAL_STA* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_INT_VAL_STA& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_INT_VAL_STA*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_FLOAT_VAL_STA:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_FLOAT_VAL_STA*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_FLOAT_VAL_STA&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_FLOAT_VAL_STA*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_FLOAT_VAL_STA* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_FLOAT_VAL_STA& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_FLOAT_VAL_STA*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_CHAR_VAL_STA:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_CHAR_VAL_STA*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_CHAR_VAL_STA&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_CHAR_VAL_STA*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_CHAR_VAL_STA* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_CHAR_VAL_STA& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_CHAR_VAL_STA*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/SEQ_UNION_VAL_STA:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::SEQ_UNION_VAL_STA*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_UNION_VAL_STA&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::SEQ_UNION_VAL_STA*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::SEQ_UNION_VAL_STA* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_UNION_VAL_STA& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::SEQ_UNION_VAL_STA*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_INT_VAL_STA:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_INT_VAL_STA*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_INT_VAL_STA&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_INT_VAL_STA*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_INT_VAL_STA* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_INT_VAL_STA& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_INT_VAL_STA*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_FLOAT_VAL_STA:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_FLOAT_VAL_STA*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_FLOAT_VAL_STA&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_FLOAT_VAL_STA*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_FLOAT_VAL_STA* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_FLOAT_VAL_STA& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_FLOAT_VAL_STA*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_CHAR_VAL_STA:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_CHAR_VAL_STA*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_CHAR_VAL_STA&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_CHAR_VAL_STA*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_CHAR_VAL_STA* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_CHAR_VAL_STA& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_CHAR_VAL_STA*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_UNION_VAL_STA:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_UNION_VAL_STA*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_UNION_VAL_STA&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_UNION_VAL_STA*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_UNION_VAL_STA* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_UNION_VAL_STA& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_UNION_VAL_STA*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/REQ_CON:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::REQ_CON*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_CON&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::REQ_CON*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::REQ_CON* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_CON& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::REQ_CON*& val)
{
    return any.in() >>= val;
}

//
// IDL:ODB_CORBA/CODB_NET/RSP_CON:1.0
//
void operator<<=(::CORBA::Any&, ODB_CORBA::CODB_NET::RSP_CON*);
void operator<<=(::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_CON&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const ODB_CORBA::CODB_NET::RSP_CON*&);

inline void
operator<<=(::CORBA::Any_var& any, ODB_CORBA::CODB_NET::RSP_CON* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_CON& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const ODB_CORBA::CODB_NET::RSP_CON*& val)
{
    return any.in() >>= val;
}

#endif
